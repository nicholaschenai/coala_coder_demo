{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '1 1'] Output: 1\n\nTests failed:\nNone",
    "code": "\ndef matrix_exponentiation(matrix, power):\n    # Base case for matrix exponentiation\n    result = [[1, 0], [0, 1]]  # Identity matrix\n    while power:\n        if power % 2 == 1:\n            result = multiply_matrices(result, matrix)\n        matrix = multiply_matrices(matrix, matrix)\n        power //= 2\n    return result\n\ndef multiply_matrices(a, b):\n    # Multiplies two 2x2 matrices\n    return [[a[0][0] * b[0][0] + a[0][1] * b[1][0],\n             a[0][0] * b[0][1] + a[0][1] * b[1][1]],\n            [a[1][0] * b[0][0] + a[1][1] * b[1][0],\n             a[1][0] * b[0][1] + a[1][1] * b[1][1]]]\n\ndef fibonacci(n):\n    # Returns the n-th Fibonacci number using matrix exponentiation\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    matrix = [[1, 1], [1, 0]]\n    result = matrix_exponentiation(matrix, n - 1)\n    return result[0][0]  # F(n) is in the top left corner\n\ndef sum_fibonacci(n, k):\n    # Calculate the sum of K Fibonacci numbers starting from F(n)\n    total_sum = 0\n    for i in range(k):\n        total_sum += fibonacci(n + i)\n    return total_sum\n\n# Read number of queries\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input().split())\n    result = sum_fibonacci(N, K)\n    print(result)  # Output the result for each query\n",
    "full_code": "\ndef matrix_exponentiation(matrix, power):\n    # Base case for matrix exponentiation\n    result = [[1, 0], [0, 1]]  # Identity matrix\n    while power:\n        if power % 2 == 1:\n            result = multiply_matrices(result, matrix)\n        matrix = multiply_matrices(matrix, matrix)\n        power //= 2\n    return result\n\ndef multiply_matrices(a, b):\n    # Multiplies two 2x2 matrices\n    return [[a[0][0] * b[0][0] + a[0][1] * b[1][0],\n             a[0][0] * b[0][1] + a[0][1] * b[1][1]],\n            [a[1][0] * b[0][0] + a[1][1] * b[1][0],\n             a[1][0] * b[0][1] + a[1][1] * b[1][1]]]\n\ndef fibonacci(n):\n    # Returns the n-th Fibonacci number using matrix exponentiation\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    matrix = [[1, 1], [1, 0]]\n    result = matrix_exponentiation(matrix, n - 1)\n    return result[0][0]  # F(n) is in the top left corner\n\ndef sum_fibonacci(n, k):\n    # Calculate the sum of K Fibonacci numbers starting from F(n)\n    total_sum = 0\n    for i in range(k):\n        total_sum += fibonacci(n + i)\n    return total_sum\n\n# Read number of queries\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input().split())\n    result = sum_fibonacci(N, K)\n    print(result)  # Output the result for each query\n",
    "reward": true,
    "program_code": "\ndef matrix_exponentiation(matrix, power):\n    # Base case for matrix exponentiation\n    result = [[1, 0], [0, 1]]  # Identity matrix\n    while power:\n        if power % 2 == 1:\n            result = multiply_matrices(result, matrix)\n        matrix = multiply_matrices(matrix, matrix)\n        power //= 2\n    return result\n\ndef multiply_matrices(a, b):\n    # Multiplies two 2x2 matrices\n    return [[a[0][0] * b[0][0] + a[0][1] * b[1][0],\n             a[0][0] * b[0][1] + a[0][1] * b[1][1]],\n            [a[1][0] * b[0][0] + a[1][1] * b[1][0],\n             a[1][0] * b[0][1] + a[1][1] * b[1][1]]]\n\ndef fibonacci(n):\n    # Returns the n-th Fibonacci number using matrix exponentiation\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    matrix = [[1, 1], [1, 0]]\n    result = matrix_exponentiation(matrix, n - 1)\n    return result[0][0]  # F(n) is in the top left corner\n\ndef sum_fibonacci(n, k):\n    # Calculate the sum of K Fibonacci numbers starting from F(n)\n    total_sum = 0\n    for i in range(k):\n        total_sum += fibonacci(n + i)\n    return total_sum\n\n# Read number of queries\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input().split())\n    result = sum_fibonacci(N, K)\n    print(result)  # Output the result for each query\n",
    "program_name": "sum_fibonacci",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   The task is to compute a specific sum based on Fibonacci numbers for multiple queries. Each query provides two numbers, N and K, and we need to calculate the sum of the first K Fibonacci numbers starting from the N-th Fibonacci number.\n\n2. **Conceptualize a solution first in plain English**:\n   - We need to efficiently compute Fibonacci numbers, especially since N and K can be as large as 10^18.\n   - Instead of calculating Fibonacci numbers directly, we can use matrix exponentiation to compute Fibonacci numbers in logarithmic time.\n   - For each query, we will compute the N-th Fibonacci number and then sum the next K Fibonacci numbers.\n   - The sum of Fibonacci numbers can be derived from the properties of Fibonacci sequences.\n\n3. **Write a pseudocode solution**:\n   ```\n   function fibonacci(n):\n       if n == 0:\n           return 0\n       if n == 1:\n           return 1\n       matrix = [[1, 1], [1, 0]]\n       result = matrix_exponentiation(matrix, n-1)\n       return result[0][0]  // This gives us F(n)\n\n   function matrix_exponentiation(matrix, power):\n       // Implement matrix exponentiation to compute matrix^power\n       // Return the resulting matrix\n\n   function sum_fibonacci(n, k):\n       sum = 0\n       for i from 0 to k-1:\n           sum += fibonacci(n + i)\n       return sum\n\n   read Q\n   for each query:\n       read N, K\n       result = sum_fibonacci(N, K)\n       print result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef matrix_exponentiation(matrix, power):\n    # Base case for matrix exponentiation\n    result = [[1, 0], [0, 1]]  # Identity matrix\n    while power:\n        if power % 2 == 1:\n            result = multiply_matrices(result, matrix)\n        matrix = multiply_matrices(matrix, matrix)\n        power //= 2\n    return result\n\ndef multiply_matrices(a, b):\n    # Multiplies two 2x2 matrices\n    return [[a[0][0] * b[0][0] + a[0][1] * b[1][0],\n             a[0][0] * b[0][1] + a[0][1] * b[1][1]],\n            [a[1][0] * b[0][0] + a[1][1] * b[1][0],\n             a[1][0] * b[0][1] + a[1][1] * b[1][1]]]\n\ndef fibonacci(n):\n    # Returns the n-th Fibonacci number using matrix exponentiation\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    matrix = [[1, 1], [1, 0]]\n    result = matrix_exponentiation(matrix, n - 1)\n    return result[0][0]  # F(n) is in the top left corner\n\ndef sum_fibonacci(n, k):\n    # Calculate the sum of K Fibonacci numbers starting from F(n)\n    total_sum = 0\n    for i in range(k):\n        total_sum += fibonacci(n + i)\n    return total_sum\n\n# Read number of queries\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input().split())\n    result = sum_fibonacci(N, K)\n    print(result)  # Output the result for each query\n```",
    "no_parent": false,
    "dependency_used": false
}