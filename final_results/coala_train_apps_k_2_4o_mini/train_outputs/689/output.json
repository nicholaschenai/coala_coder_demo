{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '0 1', '1 -1'] Output: YES\n\nTests failed:\nNone",
    "code": "\ndef find_spitting_zebras(t):\n    # Create a dictionary to store the positions and their target spit positions\n    positions = {}\n    \n    # Read each zebra's position and spit distance\n    for _ in range(t):\n        a, b = map(int, input().split())\n        target_position = a + b  # Calculate where the zebra spits\n        positions[a] = target_position  # Store the position and its target\n    \n    # Check for each zebra if there is a reciprocal spit\n    for a in positions:\n        target = positions[a]  # Get the target position of the current zebra\n        # Check if the target position exists in the dictionary\n        if target in positions:\n            # Check if the zebra at the target position spits back to the original position\n            if positions[target] == a:\n                print(\"YES\")  # Found a pair that spits at each other\n                return\n    \n    print(\"NO\")  # No such pair found\n\n# Read the number of zebras\nt = int(input())\nfind_spitting_zebras(t)  # Call the function with the number of zebras\n",
    "full_code": "\ndef find_spitting_zebras(t):\n    # Create a dictionary to store the positions and their target spit positions\n    positions = {}\n    \n    # Read each zebra's position and spit distance\n    for _ in range(t):\n        a, b = map(int, input().split())\n        target_position = a + b  # Calculate where the zebra spits\n        positions[a] = target_position  # Store the position and its target\n    \n    # Check for each zebra if there is a reciprocal spit\n    for a in positions:\n        target = positions[a]  # Get the target position of the current zebra\n        # Check if the target position exists in the dictionary\n        if target in positions:\n            # Check if the zebra at the target position spits back to the original position\n            if positions[target] == a:\n                print(\"YES\")  # Found a pair that spits at each other\n                return\n    \n    print(\"NO\")  # No such pair found\n\n# Read the number of zebras\nt = int(input())\nfind_spitting_zebras(t)  # Call the function with the number of zebras\n",
    "reward": true,
    "program_code": "\ndef find_spitting_zebras(t):\n    # Create a dictionary to store the positions and their target spit positions\n    positions = {}\n    \n    # Read each zebra's position and spit distance\n    for _ in range(t):\n        a, b = map(int, input().split())\n        target_position = a + b  # Calculate where the zebra spits\n        positions[a] = target_position  # Store the position and its target\n    \n    # Check for each zebra if there is a reciprocal spit\n    for a in positions:\n        target = positions[a]  # Get the target position of the current zebra\n        # Check if the target position exists in the dictionary\n        if target in positions:\n            # Check if the zebra at the target position spits back to the original position\n            if positions[target] == a:\n                print(\"YES\")  # Found a pair that spits at each other\n                return\n    \n    print(\"NO\")  # No such pair found\n\n# Read the number of zebras\nt = int(input())\nfind_spitting_zebras(t)  # Call the function with the number of zebras\n",
    "program_name": "find_spitting_zebras",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to determine if there are two zebras in a jungle that spit at each other. Each zebra has a position and a distance it spits. If a zebra at position `a` spits `b` meters, it can hit another zebra at position `a + b`. We need to check if there exists a pair of zebras such that one zebra spits at the other and vice versa.\n\n2. **Conceptualize a solution first in plain English:**\n   - We will read the number of zebras and their respective positions and spit distances.\n   - We will store the positions and the target positions (where they spit) in a dictionary.\n   - For each zebra, we will check if the target position it spits to has a zebra that spits back to its original position.\n   - If such a pair is found, we will output \"YES\". If no such pairs exist after checking all zebras, we will output \"NO\".\n\n3. **Write a pseudocode solution:**\n   ```\n   function find_spitting_zebras(t):\n       create an empty dictionary to store positions\n       for i from 1 to t:\n           read position a and distance b\n           calculate target position as a + b\n           store the position and target in the dictionary\n       \n       for each zebra in the dictionary:\n           if the target position of this zebra exists in the dictionary:\n               check if the zebra at the target position spits back to the original position\n               if it does, return \"YES\"\n       \n       return \"NO\"\n\n   read integer t\n   call find_spitting_zebras(t)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef find_spitting_zebras(t):\n    # Create a dictionary to store the positions and their target spit positions\n    positions = {}\n    \n    # Read each zebra's position and spit distance\n    for _ in range(t):\n        a, b = map(int, input().split())\n        target_position = a + b  # Calculate where the zebra spits\n        positions[a] = target_position  # Store the position and its target\n    \n    # Check for each zebra if there is a reciprocal spit\n    for a in positions:\n        target = positions[a]  # Get the target position of the current zebra\n        # Check if the target position exists in the dictionary\n        if target in positions:\n            # Check if the zebra at the target position spits back to the original position\n            if positions[target] == a:\n                print(\"YES\")  # Found a pair that spits at each other\n                return\n    \n    print(\"NO\")  # No such pair found\n\n# Read the number of zebras\nt = int(input())\nfind_spitting_zebras(t)  # Call the function with the number of zebras\n```",
    "no_parent": false,
    "dependency_used": false
}