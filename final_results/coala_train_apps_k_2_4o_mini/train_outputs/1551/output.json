{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Output: Real Fancy\nregularly fancy\n\nTests failed:\nNone",
    "code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input())\nquotes = []\n# Read each quote\nfor _ in range(T):\n    quotes.append(input())\n\n# Classify the quotes\nclassify_quotes(T, quotes)\n",
    "full_code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input())\nquotes = []\n# Read each quote\nfor _ in range(T):\n    quotes.append(input())\n\n# Classify the quotes\nclassify_quotes(T, quotes)\n",
    "reward": true,
    "program_code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input())\nquotes = []\n# Read each quote\nfor _ in range(T):\n    quotes.append(input())\n\n# Classify the quotes\nclassify_quotes(T, quotes)\n",
    "program_name": "classify_quotes",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   The task is to classify quotes based on whether they contain the word \"not\". If a quote contains \"not\", it is classified as \"Real Fancy\". If it does not contain \"not\", it is classified as \"regularly fancy\". We need to process multiple quotes and provide the classification for each.\n\n2. **Conceptualize a solution first in plain English**:\n   We will read the number of quotes (test cases) and then for each quote, we will check if the word \"not\" is present. This can be done by splitting the quote into words and checking if \"not\" is one of those words. Based on this check, we will print either \"Real Fancy\" or \"regularly fancy\".\n\n3. **Write a pseudocode solution**:\n   ```\n   Read the integer T (number of test cases)\n   For each test case from 1 to T:\n       Read the quote S\n       Split S into words\n       If \"not\" is in the list of words:\n           Print \"Real Fancy\"\n       Else:\n           Print \"regularly fancy\"\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input())\nquotes = []\n# Read each quote\nfor _ in range(T):\n    quotes.append(input())\n\n# Classify the quotes\nclassify_quotes(T, quotes)\n```",
    "no_parent": false,
    "dependency_used": false
}