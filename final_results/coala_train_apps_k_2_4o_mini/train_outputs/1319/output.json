{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['10 3', '1', '3', '7', '6', '-1', '5', '-1', '18', '9', '11', '2', '-1', '4'] Output: 7\n6\n18\n\nTests failed:\nNone",
    "code": "\ndef find_richest_citizens():\n    # Read the first line of input to get N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Initialize a list to keep track of the wealth of citizens who have declared\n    citizens = []\n    \n    # Initialize a list to store the results of beheaded citizens\n    results = []\n    \n    # Process each of the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        \n        if line == '-1':\n            # King visits, find the richest citizen\n            richest = max(citizens)  # Find the maximum wealth\n            results.append(richest)   # Store the result\n            citizens.remove(richest)   # Remove the richest citizen from the list\n        else:\n            # Citizen declares their wealth\n            wealth = int(line)\n            citizens.append(wealth)  # Add the wealth to the citizens' list\n    \n    # Print the results of the beheaded citizens\n    for result in results:\n        print(result)\n\nfind_richest_citizens()\n",
    "full_code": "\ndef find_richest_citizens():\n    # Read the first line of input to get N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Initialize a list to keep track of the wealth of citizens who have declared\n    citizens = []\n    \n    # Initialize a list to store the results of beheaded citizens\n    results = []\n    \n    # Process each of the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        \n        if line == '-1':\n            # King visits, find the richest citizen\n            richest = max(citizens)  # Find the maximum wealth\n            results.append(richest)   # Store the result\n            citizens.remove(richest)   # Remove the richest citizen from the list\n        else:\n            # Citizen declares their wealth\n            wealth = int(line)\n            citizens.append(wealth)  # Add the wealth to the citizens' list\n    \n    # Print the results of the beheaded citizens\n    for result in results:\n        print(result)\n\nfind_richest_citizens()\n",
    "reward": true,
    "program_code": "\ndef find_richest_citizens():\n    # Read the first line of input to get N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Initialize a list to keep track of the wealth of citizens who have declared\n    citizens = []\n    \n    # Initialize a list to store the results of beheaded citizens\n    results = []\n    \n    # Process each of the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        \n        if line == '-1':\n            # King visits, find the richest citizen\n            richest = max(citizens)  # Find the maximum wealth\n            results.append(richest)   # Store the result\n            citizens.remove(richest)   # Remove the richest citizen from the list\n        else:\n            # Citizen declares their wealth\n            wealth = int(line)\n            citizens.append(wealth)  # Add the wealth to the citizens' list\n    \n    # Print the results of the beheaded citizens\n    for result in results:\n        print(result)\n\nfind_richest_citizens()\n",
    "program_name": "find_richest_citizens",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   The problem involves a king who wants to eliminate corrupt citizens based on their wealth. Citizens declare their wealth one by one, and whenever the king enters the court, the prime minister must quickly identify and behead the richest citizen who has declared their wealth so far. The input consists of a sequence of wealth declarations and king's visits, and the output should be the wealth of the citizens beheaded during each of the king's visits.\n\n2. **Conceptualize a solution first in plain English**:\n   We need to keep track of the wealth of citizens as they declare it. When the king visits, we should be able to quickly find the richest citizen who has declared their wealth and is still alive. To achieve this, we can use a list to store the wealth of citizens and a variable to keep track of the richest citizen. Each time the king visits, we will find the maximum wealth from the list of declared citizens, remove that citizen from the list, and print their wealth.\n\n3. **Write a pseudocode solution**:\n   ```\n   Initialize an empty list to store the wealth of citizens\n   Initialize an empty list to store the results of beheaded citizens\n\n   For each input line:\n       If the line is a positive integer (wealth):\n           Append the wealth to the citizens' list\n       If the line is -1 (king's visit):\n           Find the maximum wealth in the citizens' list\n           Append this wealth to the results list\n           Remove this wealth from the citizens' list\n\n   Print each wealth from the results list\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_richest_citizens():\n    # Read the first line of input to get N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Initialize a list to keep track of the wealth of citizens who have declared\n    citizens = []\n    \n    # Initialize a list to store the results of beheaded citizens\n    results = []\n    \n    # Process each of the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        \n        if line == '-1':\n            # King visits, find the richest citizen\n            richest = max(citizens)  # Find the maximum wealth\n            results.append(richest)   # Store the result\n            citizens.remove(richest)   # Remove the richest citizen from the list\n        else:\n            # Citizen declares their wealth\n            wealth = int(line)\n            citizens.append(wealth)  # Add the wealth to the citizens' list\n    \n    # Print the results of the beheaded citizens\n    for result in results:\n        print(result)\n\nfind_richest_citizens()\n```",
    "no_parent": false,
    "dependency_used": false
}