{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: 4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n Output: YES\nNO\nYES\nNO\n\n\nTests failed:\nNone",
    "code": "\ndef can_satisfy_customers(test_cases):\n    for case in test_cases:\n        n, m = case[0], case[1]  # number of customers and initial temperature\n        customers = case[2]  # list of customers\n        current_time = 0\n        current_min_temp = m\n        current_max_temp = m\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer  # arrival time and preferred temperature range\n            time_passed = t_i - current_time\n            \n            # Update the current temperature range based on time passed\n            current_min_temp -= time_passed\n            current_max_temp += time_passed\n            \n            # Adjust the current temperature range to fit the customer's preferred range\n            current_min_temp = max(current_min_temp, l_i)\n            current_max_temp = min(current_max_temp, h_i)\n            \n            # If the current achievable temperature range is invalid, print \"NO\"\n            if current_min_temp > current_max_temp:\n                print(\"NO\")\n                break\n            \n            # Update the current time to the customer's arrival time\n            current_time = t_i\n        else:\n            # If all customers can be satisfied, print \"YES\"\n            print(\"YES\")\n\n# Read input\nq = int(input())  # number of test cases\ntest_cases = []\nfor _ in range(q):\n    n, m = map(int, input().split())  # number of customers and initial temperature\n    customers = [tuple(map(int, input().split())) for _ in range(n)]  # list of customers\n    test_cases.append((n, m, customers))\n\n# Call the function with the test cases\ncan_satisfy_customers(test_cases)\n",
    "full_code": "\ndef can_satisfy_customers(test_cases):\n    for case in test_cases:\n        n, m = case[0], case[1]  # number of customers and initial temperature\n        customers = case[2]  # list of customers\n        current_time = 0\n        current_min_temp = m\n        current_max_temp = m\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer  # arrival time and preferred temperature range\n            time_passed = t_i - current_time\n            \n            # Update the current temperature range based on time passed\n            current_min_temp -= time_passed\n            current_max_temp += time_passed\n            \n            # Adjust the current temperature range to fit the customer's preferred range\n            current_min_temp = max(current_min_temp, l_i)\n            current_max_temp = min(current_max_temp, h_i)\n            \n            # If the current achievable temperature range is invalid, print \"NO\"\n            if current_min_temp > current_max_temp:\n                print(\"NO\")\n                break\n            \n            # Update the current time to the customer's arrival time\n            current_time = t_i\n        else:\n            # If all customers can be satisfied, print \"YES\"\n            print(\"YES\")\n\n# Read input\nq = int(input())  # number of test cases\ntest_cases = []\nfor _ in range(q):\n    n, m = map(int, input().split())  # number of customers and initial temperature\n    customers = [tuple(map(int, input().split())) for _ in range(n)]  # list of customers\n    test_cases.append((n, m, customers))\n\n# Call the function with the test cases\ncan_satisfy_customers(test_cases)\n",
    "reward": true,
    "program_code": "\ndef can_satisfy_customers(test_cases):\n    for case in test_cases:\n        n, m = case[0], case[1]  # number of customers and initial temperature\n        customers = case[2]  # list of customers\n        current_time = 0\n        current_min_temp = m\n        current_max_temp = m\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer  # arrival time and preferred temperature range\n            time_passed = t_i - current_time\n            \n            # Update the current temperature range based on time passed\n            current_min_temp -= time_passed\n            current_max_temp += time_passed\n            \n            # Adjust the current temperature range to fit the customer's preferred range\n            current_min_temp = max(current_min_temp, l_i)\n            current_max_temp = min(current_max_temp, h_i)\n            \n            # If the current achievable temperature range is invalid, print \"NO\"\n            if current_min_temp > current_max_temp:\n                print(\"NO\")\n                break\n            \n            # Update the current time to the customer's arrival time\n            current_time = t_i\n        else:\n            # If all customers can be satisfied, print \"YES\"\n            print(\"YES\")\n\n# Read input\nq = int(input())  # number of test cases\ntest_cases = []\nfor _ in range(q):\n    n, m = map(int, input().split())  # number of customers and initial temperature\n    customers = [tuple(map(int, input().split())) for _ in range(n)]  # list of customers\n    test_cases.append((n, m, customers))\n\n# Call the function with the test cases\ncan_satisfy_customers(test_cases)\n",
    "program_name": "can_satisfy_customers",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   Gildong runs a restaurant and wants to ensure that the temperature is suitable for all customers who have made reservations. Each customer has a specific time they will arrive and a preferred temperature range. The air conditioner can be set to heat, cool, or remain off, and the temperature changes accordingly. The task is to determine if it's possible to adjust the temperature to satisfy all customers at their respective arrival times.\n\n2. **Conceptualize a solution first in plain English**:\n   We need to track the temperature range that can be achieved at each customer's arrival time. Starting from the initial temperature, we will calculate how much time has passed since the last customer and adjust the temperature range accordingly. For each customer, we will check if the current achievable temperature range overlaps with their preferred range. If it does for all customers, we can satisfy them; otherwise, we cannot.\n\n3. **Write a pseudocode solution**:\n   ```\n   function can_satisfy_customers(test_cases):\n       for each test_case in test_cases:\n           read n (number of customers) and m (initial temperature)\n           initialize current_time to 0\n           initialize current_min_temp to m\n           initialize current_max_temp to m\n           \n           for each customer in test_case:\n               read t_i, l_i, h_i (arrival time and preferred temperature range)\n               time_passed = t_i - current_time\n               \n               update current_min_temp and current_max_temp:\n                   current_min_temp -= time_passed\n                   current_max_temp += time_passed\n               \n               update current_min_temp and current_max_temp to be within l_i and h_i:\n                   current_min_temp = max(current_min_temp, l_i)\n                   current_max_temp = min(current_max_temp, h_i)\n               \n               if current_min_temp > current_max_temp:\n                   print \"NO\"\n                   break\n               \n               update current_time to t_i\n           else:\n               print \"YES\"\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef can_satisfy_customers(test_cases):\n    for case in test_cases:\n        n, m = case[0], case[1]  # number of customers and initial temperature\n        customers = case[2]  # list of customers\n        current_time = 0\n        current_min_temp = m\n        current_max_temp = m\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer  # arrival time and preferred temperature range\n            time_passed = t_i - current_time\n            \n            # Update the current temperature range based on time passed\n            current_min_temp -= time_passed\n            current_max_temp += time_passed\n            \n            # Adjust the current temperature range to fit the customer's preferred range\n            current_min_temp = max(current_min_temp, l_i)\n            current_max_temp = min(current_max_temp, h_i)\n            \n            # If the current achievable temperature range is invalid, print \"NO\"\n            if current_min_temp > current_max_temp:\n                print(\"NO\")\n                break\n            \n            # Update the current time to the customer's arrival time\n            current_time = t_i\n        else:\n            # If all customers can be satisfied, print \"YES\"\n            print(\"YES\")\n\n# Read input\nq = int(input())  # number of test cases\ntest_cases = []\nfor _ in range(q):\n    n, m = map(int, input().split())  # number of customers and initial temperature\n    customers = [tuple(map(int, input().split())) for _ in range(n)]  # list of customers\n    test_cases.append((n, m, customers))\n\n# Call the function with the test cases\ncan_satisfy_customers(test_cases)\n```",
    "no_parent": false,
    "dependency_used": false
}