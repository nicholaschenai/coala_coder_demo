{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['5', '1 5 31', '4', '1 10 3', '23', '2 5 7', '20 36', '2 5 10', '19 2', '3 3 300', '1 1 1'] Output: 0\n2\n7\n4\n1\n\nTests failed:\nNone",
    "code": "\ndef max_division_3_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        N, K, D = case[0], case[1], case[2]  # Unpack the values\n        A = case[3]  # List of problems created by each setter\n        \n        # Calculate the total number of problems\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    N, K, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_division_3_contests(T, test_cases)\n",
    "full_code": "\ndef max_division_3_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        N, K, D = case[0], case[1], case[2]  # Unpack the values\n        A = case[3]  # List of problems created by each setter\n        \n        # Calculate the total number of problems\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    N, K, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_division_3_contests(T, test_cases)\n",
    "reward": true,
    "program_code": "\ndef max_division_3_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        N, K, D = case[0], case[1], case[2]  # Unpack the values\n        A = case[3]  # List of problems created by each setter\n        \n        # Calculate the total number of problems\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    N, K, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_division_3_contests(T, test_cases)\n",
    "program_name": "max_division_3_contests",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   Chef wants to organize Division-3 contests using problems created by his setters. Each contest requires a specific number of problems, and Chef has a limited number of days to host these contests. The task is to determine how many contests Chef can host given the number of problems available and the constraints on the number of days.\n\n2. **Conceptualize a solution first in plain English**:\n   - For each test case, read the number of setters, the number of problems required for a contest, and the number of days available.\n   - Sum up the total number of problems created by all setters.\n   - Calculate how many contests can be formed by dividing the total number of problems by the number of problems required for one contest.\n   - The maximum number of contests Chef can host is the smaller value between the number of contests that can be formed and the number of days available.\n\n3. **Write a pseudocode solution**:\n   ```\n   function max_division_3_contests(T, test_cases):\n       for each test_case in test_cases:\n           read N, K, D\n           read A (list of problems created by each setter)\n           total_problems = sum(A)\n           contests_possible = total_problems // K\n           max_contests = min(contests_possible, D)\n           print(max_contests)\n\n   read T\n   test_cases = []\n   for i from 1 to T:\n       read N, K, D\n       read A (list of integers)\n       append (N, K, D, A) to test_cases\n   max_division_3_contests(T, test_cases)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef max_division_3_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        N, K, D = case[0], case[1], case[2]  # Unpack the values\n        A = case[3]  # List of problems created by each setter\n        \n        # Calculate the total number of problems\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    N, K, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_division_3_contests(T, test_cases)\n```",
    "no_parent": false,
    "dependency_used": false
}