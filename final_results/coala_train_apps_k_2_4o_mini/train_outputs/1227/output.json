{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'blue yellow green orange black green', 'green yellow green orange black green'] Output: NO\nYES\n\nTests failed:\nNone",
    "code": "\ndef check_adjacent_colors(test_cases):\n    results = []\n    \n    for colors in test_cases:\n        # Check the combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\n# Read input\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function with the test cases\ncheck_adjacent_colors(test_cases)\n",
    "full_code": "\ndef check_adjacent_colors(test_cases):\n    results = []\n    \n    for colors in test_cases:\n        # Check the combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\n# Read input\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function with the test cases\ncheck_adjacent_colors(test_cases)\n",
    "reward": true,
    "program_code": "\ndef check_adjacent_colors(test_cases):\n    results = []\n    \n    for colors in test_cases:\n        # Check the combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\n# Read input\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function with the test cases\ncheck_adjacent_colors(test_cases)\n",
    "program_name": "check_adjacent_colors",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   The problem involves checking if it is possible to select three adjacent sides of a cube that are painted the same color. Each cube has six sides, and the colors of these sides are provided as input. We need to determine for multiple test cases whether such a selection is possible.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we need to identify the three pairs of adjacent sides on a cube. The pairs are:\n   - Front, Left, Top\n   - Front, Right, Top\n   - Back, Left, Top\n   - Back, Right, Top\n   - Front, Left, Bottom\n   - Front, Right, Bottom\n   - Back, Left, Bottom\n   - Back, Right, Bottom\n\n   For each test case, we will check if any of these combinations of sides have the same color. If at least one combination matches, we will output \"YES\"; otherwise, we will output \"NO\".\n\n3. **Write a pseudocode solution:**\n   ```\n   function check_adjacent_colors(test_cases):\n       for each test_case in test_cases:\n           read colors of the six sides\n           check the following combinations:\n               - colors[0], colors[1], colors[2] (Front, Back, Left)\n               - colors[0], colors[1], colors[3] (Front, Back, Right)\n               - colors[0], colors[2], colors[4] (Front, Left, Top)\n               - colors[0], colors[3], colors[4] (Front, Right, Top)\n               - colors[1], colors[2], colors[4] (Back, Left, Top)\n               - colors[1], colors[3], colors[4] (Back, Right, Top)\n               - colors[0], colors[2], colors[5] (Front, Left, Bottom)\n               - colors[0], colors[3], colors[5] (Front, Right, Bottom)\n               - colors[1], colors[2], colors[5] (Back, Left, Bottom)\n               - colors[1], colors[3], colors[5] (Back, Right, Bottom)\n           if any combination has the same color:\n               output \"YES\"\n           else:\n               output \"NO\"\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef check_adjacent_colors(test_cases):\n    results = []\n    \n    for colors in test_cases:\n        # Check the combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\n# Read input\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function with the test cases\ncheck_adjacent_colors(test_cases)\n```",
    "no_parent": false,
    "dependency_used": false
}