{
    "count_col_triang": {
        "code": "\ndef count_col_triang(a):\n    from itertools import combinations\n\n    # Step 1: Organize points by color\n    color_dict = {}\n    for point in a:\n        coord, color = point\n        if color not in color_dict:\n            color_dict[color] = []\n        color_dict[color].append(coord)\n\n    # Step 2: Initialize variables for results\n    total_points = len(a)\n    unique_colors = len(color_dict)\n    total_triangles = 0\n    triangle_counts = {}\n\n    # Step 3: Calculate triangles for each color\n    for color, points in color_dict.items():\n        num_points = len(points)\n        if num_points < 3:\n            triangle_counts[color] = 0\n            continue\n        \n        count = 0\n        # Check all combinations of 3 points\n        for p1, p2, p3 in combinations(points, 3):\n            # Step 4: Check for collinearity using the determinant method\n            if (p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1])) != 0:\n                count += 1\n        \n        triangle_counts[color] = count\n        total_triangles += count\n\n    # Step 5: Find the color(s) with the maximum number of triangles\n    max_triangles = max(triangle_counts.values(), default=0)\n    max_colors = sorted([color for color, count in triangle_counts.items() if count == max_triangles])\n\n    # Prepare the final output\n    if max_triangles > 0:\n        return [total_points, unique_colors, total_triangles, [max_colors[0], max_triangles]]\n    else:\n        return [total_points, unique_colors, total_triangles, []]\n\n",
        "dependencies": [],
        "task": "```if:java\n___Note for Java users:___ Due to type checking in Java, inputs and outputs are formated quite differently in this language. See the footnotes of the description.\n\n\n```\n\nYou have the following lattice points with their corresponding coordinates and each one with an specific colour.\n\n ```\nPoint   [x ,  y]     Colour\n----------------------------\n  A     [ 3,  4]     Blue\n  B     [-7, -1]     Red\n  C     [ 7, -6]     Yellow\n  D     [ 2,  5]     Yellow\n  E     [ 1, -5]     Red\n  F     [-1,  4]     Red\n  G     [ 1,  7]     Red\n  H     [-3,  5]     Red\n  I     [-3, -5]     Blue\n  J     [ 4,  1]     Blue\n```\nWe want to count the triangles that have the three vertices with the same colour. The following picture shows the distribution of the points in the plane with the required triangles.\n\n![source: imgur.com](http://i.imgur.com/sP0l1i1.png)\n\nThe input that we will have for the field of lattice points described above is:\n\n```\n[[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"], \n [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ]\n```\nWe see the following result from it:\n\n```\nColour   Amount of Triangles       Triangles\nYellow         0                    -------\nBlue           1                      AIJ\nRed            10                   BEF,BEG,BEH,BFG,BFH,BGH,EFG,EFH,EHG,FGH\n```\nAs we have 5 different points in red and each combination of 3 points that are not aligned.\n\nWe need a code that may give us the following information in order:\n\n```\n1) Total given points\n2) Total number of colours\n3) Total number of possible triangles\n4) and 5) The colour (or colours, sorted alphabetically) with the highest amount of triangles\n```\n\nIn Python our function will work like:\n\n```\n[10, 3, 11, [\"red\",10]]) == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], \n                                              [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"],\n                                              [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nIn the following case we have some points that are aligned and we have less triangles that can be formed:\n\n```\n[10, 3, 7, [\"red\", 6]] == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n                                            [[1, -5], \"red\"],   [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"], \n                                            [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nJust to see the change with the previous case we have this:\n\n![source: imgur.com](http://i.imgur.com/cCgO7ql.png)\n\nIn the special case that the list of points does not generate an even single triangle, the output will be like this case:\n\n```\n[9, 3, 0, []] == count_col_triang([[[1, -2], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1, -5], \"red\"],\n                                  [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"],    [[-3, -5], \"blue\"], \n                                  [[4, 1], \"blue\"] ])\n```\nIt will be this case:\n\n![source: imgur.com](http://i.imgur.com/VB7t7Ij.png)\n\nIf in the result we have two or more colours with the same maximum amount of triangles, the last list should be like (e.g)\n\n```\n[35, 6, 35, [\"blue\", \"red\", \"yellow\", 23]]     # having the names of the colours sorted alphabetically\n```\nFor the condition of three algined points A, B, C, you should know that the the following determinant should be 0.\n\n```\n | xA    yA    1|\n | xB    yB    1|    = 0\n | xC    yC    1|\n\n```\nAssumptions:\n\n- In the list you have unique points, so a point can have only one colour.\n\n- All the inputs are valid\n\nEnjoy it!\n\n````if:java\n---\n\n___For java users:___\n\nTwo immutable objects, `ColouredPoint` and `TriangleResult`, have been designed for you in the preloaded part. You will receive inputs as lists of ColouredPoint objects and will return a TriangleResult object. For the last one, you may note the organization of the arguments of the constructor which differs a bit from the description above.\n\nYou may find below the signatures of the available methods of these objects:\n\n````",
        "description": "\n[description for function: count_col_triang]\nThis function organizes a list of points by their colors and calculates the number of non-collinear triangles that can be formed from points of the same color. It first groups the points based on their color and initializes counters for the total number of points, unique colors, and triangles. For each color, it checks all combinations of three points to determine if they are non-collinear using a determinant method. It keeps track of the count of triangles for each color and the total number of triangles across all colors. Finally, it identifies the color with the maximum number of triangles and returns a summary that includes the total points, unique colors, total triangles, and the color with the maximum triangles along with its count. If no triangles can be formed, it returns an empty list for the color with the maximum triangles.\n\n[end of description]\nThis knowledge is useful in scenarios where one needs to analyze geometric properties of points in a plane, particularly in computational geometry, computer graphics, or data visualization. It can help in understanding how to count specific configurations (like triangles) based on certain attributes (like color) and can be applied in various fields such as game development, simulations, and even in data analysis where visual representation of data points is required. Additionally, it can be beneficial in educational contexts for teaching concepts related to combinatorics and geometry."
    }
}