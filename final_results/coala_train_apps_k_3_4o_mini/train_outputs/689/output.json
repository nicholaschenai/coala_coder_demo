{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '0 1', '1 -1'] Output: YES\n\nTests failed:\nNone",
    "code": "\ndef find_spitting_zebras(t, records):\n    # Create a dictionary to store positions and their target positions\n    spit_map = {}\n    \n    # Populate the dictionary with target positions\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        spit_map[target_position] = position  # Store the original position that spits to this target\n\n    # Check for each zebra if it spits at another zebra that spits back\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        # Check if the target position exists and if it spits back to the original position\n        if target_position in spit_map and spit_map[target_position] == position:\n            return \"YES\"  # Found a pair that spits at each other\n\n    return \"NO\"  # No such pairs found\n\n# Read number of zebras\nt = int(input())\nrecords = []\n\n# Read each zebra's position and spit distance\nfor _ in range(t):\n    a, b = map(int, input().split())\n    records.append((a, b))\n\n# Get the result and print it\nresult = find_spitting_zebras(t, records)\nprint(result)\n",
    "full_code": "\ndef find_spitting_zebras(t, records):\n    # Create a dictionary to store positions and their target positions\n    spit_map = {}\n    \n    # Populate the dictionary with target positions\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        spit_map[target_position] = position  # Store the original position that spits to this target\n\n    # Check for each zebra if it spits at another zebra that spits back\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        # Check if the target position exists and if it spits back to the original position\n        if target_position in spit_map and spit_map[target_position] == position:\n            return \"YES\"  # Found a pair that spits at each other\n\n    return \"NO\"  # No such pairs found\n\n# Read number of zebras\nt = int(input())\nrecords = []\n\n# Read each zebra's position and spit distance\nfor _ in range(t):\n    a, b = map(int, input().split())\n    records.append((a, b))\n\n# Get the result and print it\nresult = find_spitting_zebras(t, records)\nprint(result)\n",
    "reward": true,
    "program_code": "\ndef find_spitting_zebras(t, records):\n    # Create a dictionary to store positions and their target positions\n    spit_map = {}\n    \n    # Populate the dictionary with target positions\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        spit_map[target_position] = position  # Store the original position that spits to this target\n\n    # Check for each zebra if it spits at another zebra that spits back\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        # Check if the target position exists and if it spits back to the original position\n        if target_position in spit_map and spit_map[target_position] == position:\n            return \"YES\"  # Found a pair that spits at each other\n\n    return \"NO\"  # No such pairs found\n\n# Read number of zebras\nt = int(input())\nrecords = []\n\n# Read each zebra's position and spit distance\nfor _ in range(t):\n    a, b = map(int, input().split())\n    records.append((a, b))\n\n# Get the result and print it\nresult = find_spitting_zebras(t, records)\nprint(result)\n",
    "program_name": "find_spitting_zebras",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   The problem involves determining if there are two zebras in a jungle that spit at each other. Each zebra has a position and a distance it spits. If a zebra at position `a` spits `b` meters, it can hit another zebra at position `a + b`. We need to check if there exists a pair of zebras such that one zebra spits at the other and vice versa.\n\n2. **Conceptualize a solution first in plain English**:\n   - We will read the number of zebras and their respective positions and spit distances.\n   - We will store the positions and the target positions (where they spit) in a dictionary.\n   - For each zebra, we will check if the target position it spits to has a zebra that spits back to its original position.\n   - If such a pair is found, we will output \"YES\". If no such pairs exist after checking all zebras, we will output \"NO\".\n\n3. **Write a pseudocode solution**:\n   ```\n   function find_spitting_zebras(t, records):\n       create a dictionary to store positions and their target positions\n       for each record in records:\n           position = record[0]\n           spit_distance = record[1]\n           target_position = position + spit_distance\n           store target_position in the dictionary with the original position as value\n\n       for each record in records:\n           position = record[0]\n           spit_distance = record[1]\n           target_position = position + spit_distance\n           if target_position exists in the dictionary:\n               if the value at target_position is equal to position:\n                   return \"YES\"\n       return \"NO\"\n\n   read t\n   create an empty list for records\n   for i from 0 to t:\n       read a and b\n       append (a, b) to records\n   result = find_spitting_zebras(t, records)\n   print result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_spitting_zebras(t, records):\n    # Create a dictionary to store positions and their target positions\n    spit_map = {}\n    \n    # Populate the dictionary with target positions\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        spit_map[target_position] = position  # Store the original position that spits to this target\n\n    # Check for each zebra if it spits at another zebra that spits back\n    for position, spit_distance in records:\n        target_position = position + spit_distance\n        # Check if the target position exists and if it spits back to the original position\n        if target_position in spit_map and spit_map[target_position] == position:\n            return \"YES\"  # Found a pair that spits at each other\n\n    return \"NO\"  # No such pairs found\n\n# Read number of zebras\nt = int(input())\nrecords = []\n\n# Read each zebra's position and spit distance\nfor _ in range(t):\n    a, b = map(int, input().split())\n    records.append((a, b))\n\n# Get the result and print it\nresult = find_spitting_zebras(t, records)\nprint(result)\n```",
    "no_parent": false,
    "dependency_used": false
}