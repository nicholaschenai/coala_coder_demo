{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'blue yellow green orange black green', 'green yellow green orange black green'] Output: NO\nYES\n\nTests failed:\nNone",
    "code": "\ndef can_choose_three_adjacent_sides(T):\n    for _ in range(T):\n        # Read the colors of the six sides\n        colors = input().split()\n        \n        # Check the eight combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # F, L, T\n            colors[0] == colors[3] == colors[4] or  # F, R, T\n            colors[0] == colors[2] == colors[5] or  # F, L, D\n            colors[0] == colors[3] == colors[5] or  # F, R, D\n            colors[1] == colors[2] == colors[4] or  # B, L, T\n            colors[1] == colors[3] == colors[4] or  # B, R, T\n            colors[1] == colors[2] == colors[5] or  # B, L, D\n            colors[1] == colors[3] == colors[5]):    # B, R, D\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nT = int(input())\ncan_choose_three_adjacent_sides(T)\n",
    "full_code": "\ndef can_choose_three_adjacent_sides(T):\n    for _ in range(T):\n        # Read the colors of the six sides\n        colors = input().split()\n        \n        # Check the eight combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # F, L, T\n            colors[0] == colors[3] == colors[4] or  # F, R, T\n            colors[0] == colors[2] == colors[5] or  # F, L, D\n            colors[0] == colors[3] == colors[5] or  # F, R, D\n            colors[1] == colors[2] == colors[4] or  # B, L, T\n            colors[1] == colors[3] == colors[4] or  # B, R, T\n            colors[1] == colors[2] == colors[5] or  # B, L, D\n            colors[1] == colors[3] == colors[5]):    # B, R, D\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nT = int(input())\ncan_choose_three_adjacent_sides(T)\n",
    "reward": true,
    "program_code": "\ndef can_choose_three_adjacent_sides(T):\n    for _ in range(T):\n        # Read the colors of the six sides\n        colors = input().split()\n        \n        # Check the eight combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # F, L, T\n            colors[0] == colors[3] == colors[4] or  # F, R, T\n            colors[0] == colors[2] == colors[5] or  # F, L, D\n            colors[0] == colors[3] == colors[5] or  # F, R, D\n            colors[1] == colors[2] == colors[4] or  # B, L, T\n            colors[1] == colors[3] == colors[4] or  # B, R, T\n            colors[1] == colors[2] == colors[5] or  # B, L, D\n            colors[1] == colors[3] == colors[5]):    # B, R, D\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nT = int(input())\ncan_choose_three_adjacent_sides(T)\n",
    "program_name": "can_choose_three_adjacent_sides",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   The task is to determine if there are three adjacent sides of a cube that are painted the same color. Each cube has six sides, and the colors of these sides are provided as input. We need to check for each test case if there exists a combination of three sides that are adjacent and share the same color.\n\n2. **Conceptualize a solution first in plain English**:\n   A cube has specific sets of three sides that are adjacent to each other. We can represent the sides of the cube as follows:\n   - Front (F)\n   - Back (B)\n   - Left (L)\n   - Right (R)\n   - Top (T)\n   - Bottom (D)\n\n   The adjacent triplets of sides are:\n   - (F, L, T)\n   - (F, R, T)\n   - (F, L, D)\n   - (F, R, D)\n   - (B, L, T)\n   - (B, R, T)\n   - (B, L, D)\n   - (B, R, D)\n\n   For each test case, we will check these combinations to see if any of them are painted the same color. If we find at least one such combination, we will output \"YES\"; otherwise, we will output \"NO\".\n\n3. **Write a pseudocode solution**:\n   ```\n   function check_adjacent_colors(test_cases):\n       for each test_case in test_cases:\n           read colors of the six sides\n           check each of the eight combinations of adjacent sides\n           if any combination has the same color:\n               output \"YES\"\n           else:\n               output \"NO\"\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef can_choose_three_adjacent_sides(T):\n    for _ in range(T):\n        # Read the colors of the six sides\n        colors = input().split()\n        \n        # Check the eight combinations of adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # F, L, T\n            colors[0] == colors[3] == colors[4] or  # F, R, T\n            colors[0] == colors[2] == colors[5] or  # F, L, D\n            colors[0] == colors[3] == colors[5] or  # F, R, D\n            colors[1] == colors[2] == colors[4] or  # B, L, T\n            colors[1] == colors[3] == colors[4] or  # B, R, T\n            colors[1] == colors[2] == colors[5] or  # B, L, D\n            colors[1] == colors[3] == colors[5]):    # B, R, D\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nT = int(input())\ncan_choose_three_adjacent_sides(T)\n```",
    "no_parent": false,
    "dependency_used": false
}