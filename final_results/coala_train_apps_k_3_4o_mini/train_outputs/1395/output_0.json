{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '2 6'] Output: 3\n\nTests failed:\nNone",
    "code": "\ndef count_divisors(n):\n    count = 0\n    # Loop through all numbers from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor of n\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        A, B = map(int, input().split())  # Read the roll numbers of Ram and Shyam\n        if A == B:\n            print(-1)  # If roll numbers are the same, infinite values of p\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of valid p values\n\nmain()  # Call the main function to execute the program\n",
    "full_code": "\ndef count_divisors(n):\n    count = 0\n    # Loop through all numbers from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor of n\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        A, B = map(int, input().split())  # Read the roll numbers of Ram and Shyam\n        if A == B:\n            print(-1)  # If roll numbers are the same, infinite values of p\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of valid p values\n\nmain()  # Call the main function to execute the program\n",
    "reward": true,
    "program_code": "\ndef count_divisors(n):\n    count = 0\n    # Loop through all numbers from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor of n\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        A, B = map(int, input().split())  # Read the roll numbers of Ram and Shyam\n        if A == B:\n            print(-1)  # If roll numbers are the same, infinite values of p\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of valid p values\n\nmain()  # Call the main function to execute the program\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   Ram and Shyam have distinct roll numbers, and they receive exam question sets based on their roll numbers. The question set they receive is determined by the formula `((roll_number - 1) % p)`, where `p` is the total number of different question sets. We need to find out how many values of `p` allow both Ram and Shyam to receive the same question set. If there are infinitely many such values, we should return -1.\n\n2. **Conceptualize a solution first in plain English:**\n   To determine the values of `p` for which Ram and Shyam can cheat, we need to ensure that the results of the modulo operation for both their roll numbers are equal. This leads us to the equation:\n   ```\n   (A - 1) % p == (B - 1) % p\n   ```\n   This can be simplified to:\n   ```\n   (A - B) % p == 0\n   ```\n   This means that `p` must be a divisor of the absolute difference between their roll numbers, `|A - B|`. If `A` equals `B`, then they can cheat for any positive integer `p`, leading to an infinite number of values. Otherwise, we need to count the divisors of `|A - B|`.\n\n3. **Write a pseudocode solution:**\n   ```\n   function count_divisors(n):\n       count = 0\n       for i from 1 to sqrt(n):\n           if n % i == 0:\n               count += 1\n               if i != n / i:\n                   count += 1\n       return count\n\n   function main():\n       read integer T\n       for each test case:\n           read integers A and B\n           if A == B:\n               print -1\n           else:\n               difference = abs(A - B)\n               divisors_count = count_divisors(difference)\n               print divisors_count\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef count_divisors(n):\n    count = 0\n    # Loop through all numbers from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor of n\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        A, B = map(int, input().split())  # Read the roll numbers of Ram and Shyam\n        if A == B:\n            print(-1)  # If roll numbers are the same, infinite values of p\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of valid p values\n\nmain()  # Call the main function to execute the program\n```",
    "no_parent": false,
    "dependency_used": false
}