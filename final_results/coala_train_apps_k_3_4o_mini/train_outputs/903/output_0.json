{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['1', '1 1', '4 4'] Expected output: [{'1.60'}] # Execution output: ['2.50']",
    "code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror\n    mirror_x = (x1 + x2) / 2\n    return mirror_x\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        x1, y1 = map(int, input().split())  # Read Kabir's coordinates\n        x2, y2 = map(int, input().split())  # Read Tara's coordinates\n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)  # Calculate mirror position\n        print(f\"{mirror_x:.2f}\")  # Print the result with 2 decimal places\n\nmain()\n",
    "full_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror\n    mirror_x = (x1 + x2) / 2\n    return mirror_x\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        x1, y1 = map(int, input().split())  # Read Kabir's coordinates\n        x2, y2 = map(int, input().split())  # Read Tara's coordinates\n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)  # Calculate mirror position\n        print(f\"{mirror_x:.2f}\")  # Print the result with 2 decimal places\n\nmain()\n",
    "reward": false,
    "program_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror\n    mirror_x = (x1 + x2) / 2\n    return mirror_x\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        x1, y1 = map(int, input().split())  # Read Kabir's coordinates\n        x2, y2 = map(int, input().split())  # Read Tara's coordinates\n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)  # Calculate mirror position\n        print(f\"{mirror_x:.2f}\")  # Print the result with 2 decimal places\n\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to determine the position on the x-axis (the front wall of a classroom) where a mirror should be placed so that Kabir, who is sitting at a certain coordinate, can see Tara, who is sitting at another coordinate. The coordinates of Kabir and Tara are given for multiple test cases.\n\n2. **Conceptualize a solution first in plain English**: \n   To find the position of the mirror, we can use the concept of reflection. The mirror's position on the x-axis can be calculated by finding the x-coordinate that would allow the line of sight from Kabir to Tara to reflect off the x-axis. This can be done by using the formula derived from the geometry of the situation.\n\n3. **Write a pseudocode solution**:\n   ```\n   function find_mirror_position(T, test_cases):\n       for each test_case in test_cases:\n           read x1, y1 (Kabir's coordinates)\n           read x2, y2 (Tara's coordinates)\n           calculate the mirror's x-coordinate using the formula:\n               mirror_x = (x1 + x2) / 2\n           print mirror_x\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror\n    mirror_x = (x1 + x2) / 2\n    return mirror_x\n\ndef main():\n    T = int(input())  # Read the number of test cases\n    for _ in range(T):\n        x1, y1 = map(int, input().split())  # Read Kabir's coordinates\n        x2, y2 = map(int, input().split())  # Read Tara's coordinates\n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)  # Calculate mirror position\n        print(f\"{mirror_x:.2f}\")  # Print the result with 2 decimal places\n\nmain()\n```",
    "no_parent": false,
    "dependency_used": false
}