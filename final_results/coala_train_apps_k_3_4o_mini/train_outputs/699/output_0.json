{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['5', '1 5 31', '4', '1 10 3', '23', '2 5 7', '20 36', '2 5 10', '19 2', '3 3 300', '1 1 1'] Output: 0\n2\n7\n4\n1\n\nTests failed:\nNone",
    "code": "\ndef max_contests(T):\n    for _ in range(T):\n        # Read the number of setters (N), problems needed for a contest (K), and days available (D)\n        N, K, D = map(int, input().split())\n        # Read the number of problems created by each setter\n        A = list(map(int, input().split()))\n        \n        # Calculate the total number of problems available\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Output the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\nmax_contests(T)\n",
    "full_code": "\ndef max_contests(T):\n    for _ in range(T):\n        # Read the number of setters (N), problems needed for a contest (K), and days available (D)\n        N, K, D = map(int, input().split())\n        # Read the number of problems created by each setter\n        A = list(map(int, input().split()))\n        \n        # Calculate the total number of problems available\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Output the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\nmax_contests(T)\n",
    "reward": true,
    "program_code": "\ndef max_contests(T):\n    for _ in range(T):\n        # Read the number of setters (N), problems needed for a contest (K), and days available (D)\n        N, K, D = map(int, input().split())\n        # Read the number of problems created by each setter\n        A = list(map(int, input().split()))\n        \n        # Calculate the total number of problems available\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Output the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\nmax_contests(T)\n",
    "program_name": "max_contests",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   Chef wants to organize Division-3 contests using problems created by his setters. Each contest requires a specific number of problems, and Chef has a limited number of days to host these contests. The task is to determine how many contests Chef can host given the number of problems available, the number of problems required for each contest, and the number of days available.\n\n2. **Conceptualize a solution first in plain English**:\n   - For each test case, read the number of setters, the number of problems required for a contest, and the number of days available.\n   - Read the number of problems created by each setter.\n   - Calculate the total number of problems available.\n   - Determine how many contests can be formed by dividing the total number of problems by the number of problems required for each contest.\n   - The maximum number of contests Chef can host is the lesser of the number of contests that can be formed and the number of days available.\n\n3. **Write a pseudocode solution**:\n   ```\n   function max_contests(T):\n       for each test case from 1 to T:\n           read N, K, D\n           read array A of size N\n           total_problems = sum(A)\n           contests_possible = total_problems // K\n           max_contests = min(contests_possible, D)\n           print max_contests\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef max_contests(T):\n    for _ in range(T):\n        # Read the number of setters (N), problems needed for a contest (K), and days available (D)\n        N, K, D = map(int, input().split())\n        # Read the number of problems created by each setter\n        A = list(map(int, input().split()))\n        \n        # Calculate the total number of problems available\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Output the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\nmax_contests(T)\n```",
    "no_parent": false,
    "dependency_used": false
}