{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '4 1', '38 2'] Output: 2\n1\n\nTests failed:\nNone",
    "code": "\ndef count_ways(N, K, max_num):\n    if N == 0:\n        return 1  # Found a valid way\n    if N < 0 or max_num <= 0:\n        return 0  # No valid way\n    \n    # Calculate the K-th power of max_num\n    power = max_num ** K\n    \n    # Count ways including max_num and excluding max_num\n    return count_ways(N - power, K, max_num - 1) + count_ways(N, K, max_num - 1)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N, K = map(int, input().split())\n        max_num = int(N ** (1/K))  # Largest integer whose K-th power is <= N\n        result = count_ways(N, K, max_num)\n        print(result)\n\nmain()\n",
    "full_code": "\ndef count_ways(N, K, max_num):\n    if N == 0:\n        return 1  # Found a valid way\n    if N < 0 or max_num <= 0:\n        return 0  # No valid way\n    \n    # Calculate the K-th power of max_num\n    power = max_num ** K\n    \n    # Count ways including max_num and excluding max_num\n    return count_ways(N - power, K, max_num - 1) + count_ways(N, K, max_num - 1)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N, K = map(int, input().split())\n        max_num = int(N ** (1/K))  # Largest integer whose K-th power is <= N\n        result = count_ways(N, K, max_num)\n        print(result)\n\nmain()\n",
    "reward": true,
    "program_code": "\ndef count_ways(N, K, max_num):\n    if N == 0:\n        return 1  # Found a valid way\n    if N < 0 or max_num <= 0:\n        return 0  # No valid way\n    \n    # Calculate the K-th power of max_num\n    power = max_num ** K\n    \n    # Count ways including max_num and excluding max_num\n    return count_ways(N - power, K, max_num - 1) + count_ways(N, K, max_num - 1)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N, K = map(int, input().split())\n        max_num = int(N ** (1/K))  # Largest integer whose K-th power is <= N\n        result = count_ways(N, K, max_num)\n        print(result)\n\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "1. **Restate the Problem in Plain English**:\n   The task is to find out how many different ways we can express a natural number \\( N \\) as the sum of unique positive integers raised to the power of \\( K \\). Each way of expressing \\( N \\) must use distinct integers.\n\n2. **Conceptualize a Solution**:\n   To solve this problem, we can use a recursive approach with memoization. The idea is to:\n   - Start from the largest integer whose \\( K \\)-th power is less than or equal to \\( N \\).\n   - For each integer, decide whether to include it in the sum or not.\n   - If included, subtract its \\( K \\)-th power from \\( N \\) and continue the process with the next smaller integer.\n   - If not included, simply continue with the next smaller integer.\n   - Use memoization to store results of subproblems to avoid redundant calculations.\n\n3. **Pseudocode Solution**:\n   ```\n   function count_ways(N, K, max_num):\n       if N == 0:\n           return 1  // Found a valid way\n       if N < 0 or max_num <= 0:\n           return 0  // No valid way\n       \n       // Calculate the K-th power of max_num\n       power = max_num ** K\n       \n       // Count ways including max_num and excluding max_num\n       return count_ways(N - power, K, max_num - 1) + count_ways(N, K, max_num - 1)\n\n   function main():\n       read T\n       for each test case:\n           read N, K\n           max_num = floor(N ** (1/K))  // Largest integer whose K-th power is <= N\n           result = count_ways(N, K, max_num)\n           print(result)\n   ```\n\n4. **Final Python Code**:\n```python\ndef count_ways(N, K, max_num):\n    if N == 0:\n        return 1  # Found a valid way\n    if N < 0 or max_num <= 0:\n        return 0  # No valid way\n    \n    # Calculate the K-th power of max_num\n    power = max_num ** K\n    \n    # Count ways including max_num and excluding max_num\n    return count_ways(N - power, K, max_num - 1) + count_ways(N, K, max_num - 1)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N, K = map(int, input().split())\n        max_num = int(N ** (1/K))  # Largest integer whose K-th power is <= N\n        result = count_ways(N, K, max_num)\n        print(result)\n\nmain()\n``` \n\nThis code reads the number of test cases and for each test case, it calculates the number of ways to express \\( N \\) as the sum of unique integers raised to the power \\( K \\) using a recursive function. The results are printed for each test case.",
    "no_parent": false,
    "dependency_used": false
}