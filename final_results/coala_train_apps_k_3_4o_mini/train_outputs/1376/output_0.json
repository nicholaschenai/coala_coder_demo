{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '2 4', '3 4 1'] Output: [{'2', '3', '1'}, {'3', '0', '1'}]\n\nTests failed:\nNone",
    "code": "\ndef distribute_ducks(T):\n    for _ in range(T):\n        # Read N (number of colors) and K (capacity of each box)\n        N, K = map(int, input().split())\n        # Read the number of ducks for each color\n        ducks = list(map(int, input().split()))\n        \n        # Initialize a list to store the distribution of ducks in boxes\n        boxes = []\n        \n        # While there are still ducks to distribute\n        for i in range(N):\n            # We will fill N boxes\n            box = [0, 0, 0, 0]  # c1, m1, c2, m2\n            m1, m2 = 0, 0  # counts of ducks in the box\n            \n            # Try to fill the box with two colors\n            for j in range(N + 1):\n                if ducks[j] > 0:\n                    if m1 == 0:  # If the first color is not set\n                        c1 = j\n                        m1 = min(ducks[j], K)\n                        ducks[j] -= m1\n                    elif m2 == 0:  # If the second color is not set\n                        c2 = j\n                        m2 = min(ducks[j], K - m1)\n                        ducks[j] -= m2\n                    else:\n                        break  # We already have two colors\n            \n            # Store the box distribution\n            boxes.append((c1, m1, c2, m2))\n        \n        # Output the distribution for each box\n        for box in boxes:\n            print(box[0], box[1], box[2], box[3])\n\nT = int(input())\ndistribute_ducks(T)\n",
    "full_code": "\ndef distribute_ducks(T):\n    for _ in range(T):\n        # Read N (number of colors) and K (capacity of each box)\n        N, K = map(int, input().split())\n        # Read the number of ducks for each color\n        ducks = list(map(int, input().split()))\n        \n        # Initialize a list to store the distribution of ducks in boxes\n        boxes = []\n        \n        # While there are still ducks to distribute\n        for i in range(N):\n            # We will fill N boxes\n            box = [0, 0, 0, 0]  # c1, m1, c2, m2\n            m1, m2 = 0, 0  # counts of ducks in the box\n            \n            # Try to fill the box with two colors\n            for j in range(N + 1):\n                if ducks[j] > 0:\n                    if m1 == 0:  # If the first color is not set\n                        c1 = j\n                        m1 = min(ducks[j], K)\n                        ducks[j] -= m1\n                    elif m2 == 0:  # If the second color is not set\n                        c2 = j\n                        m2 = min(ducks[j], K - m1)\n                        ducks[j] -= m2\n                    else:\n                        break  # We already have two colors\n            \n            # Store the box distribution\n            boxes.append((c1, m1, c2, m2))\n        \n        # Output the distribution for each box\n        for box in boxes:\n            print(box[0], box[1], box[2], box[3])\n\nT = int(input())\ndistribute_ducks(T)\n",
    "reward": true,
    "program_code": "\ndef distribute_ducks(T):\n    for _ in range(T):\n        # Read N (number of colors) and K (capacity of each box)\n        N, K = map(int, input().split())\n        # Read the number of ducks for each color\n        ducks = list(map(int, input().split()))\n        \n        # Initialize a list to store the distribution of ducks in boxes\n        boxes = []\n        \n        # While there are still ducks to distribute\n        for i in range(N):\n            # We will fill N boxes\n            box = [0, 0, 0, 0]  # c1, m1, c2, m2\n            m1, m2 = 0, 0  # counts of ducks in the box\n            \n            # Try to fill the box with two colors\n            for j in range(N + 1):\n                if ducks[j] > 0:\n                    if m1 == 0:  # If the first color is not set\n                        c1 = j\n                        m1 = min(ducks[j], K)\n                        ducks[j] -= m1\n                    elif m2 == 0:  # If the second color is not set\n                        c2 = j\n                        m2 = min(ducks[j], K - m1)\n                        ducks[j] -= m2\n                    else:\n                        break  # We already have two colors\n            \n            # Store the box distribution\n            boxes.append((c1, m1, c2, m2))\n        \n        # Output the distribution for each box\n        for box in boxes:\n            print(box[0], box[1], box[2], box[3])\n\nT = int(input())\ndistribute_ducks(T)\n",
    "program_name": "distribute_ducks",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   Salmon has a number of rubber ducks of different colors and wants to organize them into boxes. Each box can hold a specific number of ducks, and he wants to ensure that each box contains at most two different colors of ducks. The task is to determine how to distribute the ducks into the boxes according to these rules.\n\n2. **Conceptualize a solution first in plain English**:\n   To solve this problem, we need to:\n   - Read the number of test cases.\n   - For each test case, read the number of colors and the capacity of each box.\n   - Read the number of ducks of each color.\n   - Distribute the ducks into boxes while ensuring that each box contains at most two colors and exactly fills the box to its capacity.\n   - Output the distribution for each box.\n\n3. **Write a pseudocode solution**:\n   ```\n   function distribute_ducks(T):\n       for each test case from 1 to T:\n           read N and K\n           read the list of ducks for each color\n           initialize an empty list for boxes\n           while there are ducks left:\n               for each box from 1 to N:\n                   find two colors with available ducks\n                   fill the box with ducks from these two colors until it reaches K\n                   record the distribution in the boxes list\n           output the distribution for each box\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef distribute_ducks(T):\n    for _ in range(T):\n        # Read N (number of colors) and K (capacity of each box)\n        N, K = map(int, input().split())\n        # Read the number of ducks for each color\n        ducks = list(map(int, input().split()))\n        \n        # Initialize a list to store the distribution of ducks in boxes\n        boxes = []\n        \n        # While there are still ducks to distribute\n        for i in range(N):\n            # We will fill N boxes\n            box = [0, 0, 0, 0]  # c1, m1, c2, m2\n            m1, m2 = 0, 0  # counts of ducks in the box\n            \n            # Try to fill the box with two colors\n            for j in range(N + 1):\n                if ducks[j] > 0:\n                    if m1 == 0:  # If the first color is not set\n                        c1 = j\n                        m1 = min(ducks[j], K)\n                        ducks[j] -= m1\n                    elif m2 == 0:  # If the second color is not set\n                        c2 = j\n                        m2 = min(ducks[j], K - m1)\n                        ducks[j] -= m2\n                    else:\n                        break  # We already have two colors\n            \n            # Store the box distribution\n            boxes.append((c1, m1, c2, m2))\n        \n        # Output the distribution for each box\n        for box in boxes:\n            print(box[0], box[1], box[2], box[3])\n\nT = int(input())\ndistribute_ducks(T)\n```",
    "no_parent": false,
    "dependency_used": false
}