{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Expected output: [{'Real', 'Fancy'}, {'regularly', 'fancy'}] # Execution output: ['Real Fancy', 'Real Fancy']",
    "code": "\ndef classify_quotes():\n    # Read the number of test cases\n    T = int(input())\n    # Loop through each test case\n    for _ in range(T):\n        # Read the quote\n        S = input().strip()\n        # Check if the word \"not\" is in the quote\n        if \"not\" in S:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Call the function to execute the solution\nclassify_quotes()\n",
    "full_code": "\ndef classify_quotes():\n    # Read the number of test cases\n    T = int(input())\n    # Loop through each test case\n    for _ in range(T):\n        # Read the quote\n        S = input().strip()\n        # Check if the word \"not\" is in the quote\n        if \"not\" in S:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Call the function to execute the solution\nclassify_quotes()\n",
    "reward": false,
    "program_code": "\ndef classify_quotes():\n    # Read the number of test cases\n    T = int(input())\n    # Loop through each test case\n    for _ in range(T):\n        # Read the quote\n        S = input().strip()\n        # Check if the word \"not\" is in the quote\n        if \"not\" in S:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Call the function to execute the solution\nclassify_quotes()\n",
    "program_name": "classify_quotes",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   The task is to classify quotes based on the presence of the word \"not\". If a quote contains the word \"not\", it is classified as \"Real Fancy\". If it does not contain the word \"not\", it is classified as \"regularly fancy\". We need to process multiple quotes and provide the classification for each.\n\n2. **Conceptualize a solution first in plain English**:\n   - Read the number of quotes (test cases).\n   - For each quote, check if the word \"not\" is present.\n   - If \"not\" is found, classify the quote as \"Real Fancy\".\n   - If \"not\" is not found, classify it as \"regularly fancy\".\n   - Print the classification for each quote.\n\n3. **Write a pseudocode solution**:\n   ```\n   function classify_quotes():\n       read integer T (number of test cases)\n       for each test case from 1 to T:\n           read string S (the quote)\n           if \"not\" is in S:\n               print \"Real Fancy\"\n           else:\n               print \"regularly fancy\"\n\n   main:\n       call classify_quotes()\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef classify_quotes():\n    # Read the number of test cases\n    T = int(input())\n    # Loop through each test case\n    for _ in range(T):\n        # Read the quote\n        S = input().strip()\n        # Check if the word \"not\" is in the quote\n        if \"not\" in S:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Call the function to execute the solution\nclassify_quotes()\n```",
    "no_parent": false,
    "dependency_used": false
}