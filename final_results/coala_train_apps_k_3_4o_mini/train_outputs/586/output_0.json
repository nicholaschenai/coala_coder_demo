{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['1', '10 5', 'amigoes  1', 'bannermen 1', 'monarchy 4', 'outliers 5', 'iniciador 10', 'aegimos 2', 'iiiacdnor 1', 'eilorstu 1', 'gimosae 3', 'mnachroy 7'] Expected output: [{'iniciador', '11'}, {'monarchy', '11'}, {'amigoes', '6'}, {'outliers', '6'}, {'bannermen', '1'}] # Execution output: ['acdiiinor 11', 'achmnory 11', 'aegimos 6', 'eilorstu 6', 'abeemnnnr 1']",
    "code": "\ndef process_submissions():\n    T = int(input())\n    for _ in range(T):\n        N, R = map(int, input().split())\n        scores = {}\n        \n        # Process first R submissions\n        for _ in range(R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Process remaining N-R submissions\n        for _ in range(N - R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Sort teams by score (descending) and name (lexicographically)\n        sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n        \n        # Print the results\n        for team in sorted_scores:\n            print(team[0], team[1])\n\n# Read input and call the function\nprocess_submissions()\n",
    "full_code": "\ndef process_submissions():\n    T = int(input())\n    for _ in range(T):\n        N, R = map(int, input().split())\n        scores = {}\n        \n        # Process first R submissions\n        for _ in range(R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Process remaining N-R submissions\n        for _ in range(N - R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Sort teams by score (descending) and name (lexicographically)\n        sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n        \n        # Print the results\n        for team in sorted_scores:\n            print(team[0], team[1])\n\n# Read input and call the function\nprocess_submissions()\n",
    "reward": false,
    "program_code": "\ndef process_submissions():\n    T = int(input())\n    for _ in range(T):\n        N, R = map(int, input().split())\n        scores = {}\n        \n        # Process first R submissions\n        for _ in range(R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Process remaining N-R submissions\n        for _ in range(N - R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Sort teams by score (descending) and name (lexicographically)\n        sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n        \n        # Print the results\n        for team in sorted_scores:\n            print(team[0], team[1])\n\n# Read input and call the function\nprocess_submissions()\n",
    "program_name": "process_submissions",
    "dependencies": [],
    "raw_msg": "1. **Restatement of the Problem**:\n   The problem requires us to process a list of team submissions for a programming competition. Each team has a unique name, and the order of characters in the name does not matter. We need to calculate the total score for each team based on their submissions, sort the teams by their scores in descending order, and in case of ties, sort them lexicographically by their names. The input consists of multiple test cases, each containing a list of submissions.\n\n2. **Conceptualization of a Solution**:\n   - Read the number of test cases.\n   - For each test case, read the number of total submissions and the number of submissions made in the first half hour.\n   - Use a dictionary to accumulate scores for each team, where the key is a sorted version of the team name (to handle the character order issue).\n   - After processing all submissions, sort the teams first by their total scores in descending order and then by their names in lexicographical order for teams with the same score.\n   - Print the sorted results.\n\n3. **Pseudocode Solution**:\n   ```\n   function process_submissions():\n       read T\n       for each test case:\n           read N, R\n           scores = {}\n           for i from 1 to R:\n               read team_name and points\n               sorted_name = sort(team_name)\n               if sorted_name not in scores:\n                   scores[sorted_name] = 0\n               scores[sorted_name] += points\n           for i from R+1 to N:\n               read team_name and points\n               sorted_name = sort(team_name)\n               if sorted_name not in scores:\n                   scores[sorted_name] = 0\n               scores[sorted_name] += points\n           sorted_scores = sort(scores by value descending, then by key)\n           for each team in sorted_scores:\n               print team name and score\n\n   read input and call process_submissions()\n   ```\n\n4. **Final Python 3 Solution**:\n```python\ndef process_submissions():\n    T = int(input())\n    for _ in range(T):\n        N, R = map(int, input().split())\n        scores = {}\n        \n        # Process first R submissions\n        for _ in range(R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Process remaining N-R submissions\n        for _ in range(N - R):\n            line = input().split()\n            team_name = line[0]\n            points = int(line[1])\n            sorted_name = ''.join(sorted(team_name))\n            if sorted_name not in scores:\n                scores[sorted_name] = 0\n            scores[sorted_name] += points\n        \n        # Sort teams by score (descending) and name (lexicographically)\n        sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n        \n        # Print the results\n        for team in sorted_scores:\n            print(team[0], team[1])\n\n# Read input and call the function\nprocess_submissions()\n```",
    "no_parent": false,
    "dependency_used": false
}