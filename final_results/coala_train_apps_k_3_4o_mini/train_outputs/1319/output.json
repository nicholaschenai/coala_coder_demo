{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['10 3', '1', '3', '7', '6', '-1', '5', '-1', '18', '9', '11', '2', '-1', '4'] Output: 7\n6\n18\n\nTests failed:\nNone",
    "code": "\ndef find_beheaded_citizens():\n    # Initialize a list to store the wealth of citizens\n    citizens = []\n    # Initialize a list to store the results of beheaded citizens\n    results = []\n\n    # Read the number of citizens and visits\n    N, M = map(int, input().split())\n    \n    # Process each input line\n    for _ in range(N + M):\n        line = int(input())\n        if line > 0:  # If it's a citizen's wealth\n            citizens.append(line)\n        elif line == -1:  # If it's a king's visit\n            # Find the richest citizen who is still alive\n            richest = max(citizens)\n            results.append(richest)\n            citizens.remove(richest)  # Mark this citizen as dead\n\n    # Output the wealth of each beheaded citizen\n    for wealth in results:\n        print(wealth)\n\nfind_beheaded_citizens()\n",
    "full_code": "\ndef find_beheaded_citizens():\n    # Initialize a list to store the wealth of citizens\n    citizens = []\n    # Initialize a list to store the results of beheaded citizens\n    results = []\n\n    # Read the number of citizens and visits\n    N, M = map(int, input().split())\n    \n    # Process each input line\n    for _ in range(N + M):\n        line = int(input())\n        if line > 0:  # If it's a citizen's wealth\n            citizens.append(line)\n        elif line == -1:  # If it's a king's visit\n            # Find the richest citizen who is still alive\n            richest = max(citizens)\n            results.append(richest)\n            citizens.remove(richest)  # Mark this citizen as dead\n\n    # Output the wealth of each beheaded citizen\n    for wealth in results:\n        print(wealth)\n\nfind_beheaded_citizens()\n",
    "reward": true,
    "program_code": "\ndef find_beheaded_citizens():\n    # Initialize a list to store the wealth of citizens\n    citizens = []\n    # Initialize a list to store the results of beheaded citizens\n    results = []\n\n    # Read the number of citizens and visits\n    N, M = map(int, input().split())\n    \n    # Process each input line\n    for _ in range(N + M):\n        line = int(input())\n        if line > 0:  # If it's a citizen's wealth\n            citizens.append(line)\n        elif line == -1:  # If it's a king's visit\n            # Find the richest citizen who is still alive\n            richest = max(citizens)\n            results.append(richest)\n            citizens.remove(richest)  # Mark this citizen as dead\n\n    # Output the wealth of each beheaded citizen\n    for wealth in results:\n        print(wealth)\n\nfind_beheaded_citizens()\n",
    "program_name": "find_beheaded_citizens",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   The problem involves a king who wants to eliminate corrupt citizens based on their wealth. Citizens declare their wealth in a court, and whenever the king visits, the prime minister must identify and behead the richest citizen who has appeared so far. The task is to determine which citizens are beheaded during the king's visits based on the order of wealth declarations and visits.\n\n2. **Conceptualize a solution first in plain English**:\n   We need to keep track of the wealth of citizens as they declare it. When the king visits, we should be able to quickly find the richest citizen who has declared their wealth and is still alive. To do this efficiently, we can use a list to store the wealth of citizens and a variable to keep track of the richest citizen. Each time the king visits, we will find the maximum wealth from the list of declared citizens, mark that citizen as dead (remove them from consideration), and output their wealth.\n\n3. **Write a pseudocode solution**:\n   ```\n   Initialize an empty list to store the wealth of citizens\n   Initialize an empty list to store the results of beheaded citizens\n\n   For each input line:\n       If the line is a positive integer (wealth):\n           Append the wealth to the citizens' list\n       If the line is -1 (king's visit):\n           Find the maximum wealth in the citizens' list\n           Append this wealth to the results list\n           Remove this wealth from the citizens' list (mark as dead)\n\n   Print each wealth from the results list\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_beheaded_citizens():\n    # Initialize a list to store the wealth of citizens\n    citizens = []\n    # Initialize a list to store the results of beheaded citizens\n    results = []\n\n    # Read the number of citizens and visits\n    N, M = map(int, input().split())\n    \n    # Process each input line\n    for _ in range(N + M):\n        line = int(input())\n        if line > 0:  # If it's a citizen's wealth\n            citizens.append(line)\n        elif line == -1:  # If it's a king's visit\n            # Find the richest citizen who is still alive\n            richest = max(citizens)\n            results.append(richest)\n            citizens.remove(richest)  # Mark this citizen as dead\n\n    # Output the wealth of each beheaded citizen\n    for wealth in results:\n        print(wealth)\n\nfind_beheaded_citizens()\n```",
    "no_parent": false,
    "dependency_used": false
}