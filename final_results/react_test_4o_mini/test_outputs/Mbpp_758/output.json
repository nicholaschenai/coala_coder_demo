{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\nTests failed:\nNone",
    "code": "\ndef unique_sublists(input_list):\n    # Create an empty dictionary to store counts of unique sublists\n    count_dict = {}\n    \n    # Iterate through each sublist in the input list\n    for sublist in input_list:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already a key in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count for this tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n            \n    # Return the dictionary containing counts of each unique sublist\n    return count_dict\n",
    "full_code": "\ndef unique_sublists(input_list):\n    # Create an empty dictionary to store counts of unique sublists\n    count_dict = {}\n    \n    # Iterate through each sublist in the input list\n    for sublist in input_list:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already a key in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count for this tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n            \n    # Return the dictionary containing counts of each unique sublist\n    return count_dict\n",
    "reward": true,
    "program_code": "\ndef unique_sublists(input_list):\n    # Create an empty dictionary to store counts of unique sublists\n    count_dict = {}\n    \n    # Iterate through each sublist in the input list\n    for sublist in input_list:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already a key in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count for this tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n            \n    # Return the dictionary containing counts of each unique sublist\n    return count_dict\n",
    "program_name": "unique_sublists",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that takes a list of lists as input. The function should count how many times each unique sublist appears in the input list and return this information in the form of a dictionary. In the dictionary, each unique sublist should be represented as a tuple, and the value should be the count of occurrences of that sublist.\n\n2. **Conceptualize a solution first in plain English:**\n   - We will create an empty dictionary to store the counts of each unique sublist.\n   - We will iterate through each sublist in the input list.\n   - For each sublist, we will convert it to a tuple (since lists are not hashable and cannot be used as dictionary keys).\n   - We will check if this tuple is already a key in our dictionary:\n     - If it is, we will increment its count.\n     - If it is not, we will add it to the dictionary with a count of 1.\n   - Finally, we will return the dictionary containing the counts of each unique sublist.\n\n3. **Write a pseudocode solution:**\n   ```\n   function unique_sublists(input_list):\n       create an empty dictionary called count_dict\n       for each sublist in input_list:\n           convert sublist to a tuple\n           if tuple is in count_dict:\n               increment count_dict[tuple] by 1\n           else:\n               set count_dict[tuple] to 1\n       return count_dict\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef unique_sublists(input_list):\n    # Create an empty dictionary to store counts of unique sublists\n    count_dict = {}\n    \n    # Iterate through each sublist in the input list\n    for sublist in input_list:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already a key in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count for this tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n            \n    # Return the dictionary containing counts of each unique sublist\n    return count_dict\n```",
    "no_parent": true,
    "dependency_used": false
}