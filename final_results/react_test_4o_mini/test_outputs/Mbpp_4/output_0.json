{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\nTests failed:\nNone",
    "code": "\ndef heap_queue_largest(numbers, n):\n    # Step 1: Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    \n    # Step 2: Select the first n elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    \n    # Step 3: Return the selected elements\n    return largest_numbers\n",
    "full_code": "\ndef heap_queue_largest(numbers, n):\n    # Step 1: Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    \n    # Step 2: Select the first n elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    \n    # Step 3: Return the selected elements\n    return largest_numbers\n",
    "reward": true,
    "program_code": "\ndef heap_queue_largest(numbers, n):\n    # Step 1: Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    \n    # Step 2: Select the first n elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    \n    # Step 3: Return the selected elements\n    return largest_numbers\n",
    "program_name": "heap_queue_largest",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list of integers and an integer `n`, and returns the `n` largest integers from that list in descending order.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can follow these steps:\n   - Sort the list of integers in descending order.\n   - Select the first `n` elements from the sorted list, as these will be the largest integers.\n   - Return this selection as the result.\n\n3. **Write a pseudocode solution**:\n   ```\n   function heap_queue_largest(numbers, n):\n       sort numbers in descending order\n       select the first n elements from the sorted list\n       return the selected elements\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef heap_queue_largest(numbers, n):\n    # Step 1: Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    \n    # Step 2: Select the first n elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    \n    # Step 3: Return the selected elements\n    return largest_numbers\n```",
    "no_parent": true,
    "dependency_used": false
}