{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\nTests failed:\nNone",
    "code": "\ndef insert_element(input_list, element):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in input_list:\n        # Append the specified element to the result list\n        result.append(element)\n        # Append the current item from the input list to the result list\n        result.append(item)\n    \n    # Return the resulting list\n    return result\n",
    "full_code": "\ndef insert_element(input_list, element):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in input_list:\n        # Append the specified element to the result list\n        result.append(element)\n        # Append the current item from the input list to the result list\n        result.append(item)\n    \n    # Return the resulting list\n    return result\n",
    "reward": true,
    "program_code": "\ndef insert_element(input_list, element):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in input_list:\n        # Append the specified element to the result list\n        result.append(element)\n        # Append the current item from the input list to the result list\n        result.append(item)\n    \n    # Return the resulting list\n    return result\n",
    "program_name": "insert_element",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list of elements and a single element. The function should insert the given element before each element in the list and return the new list.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can create a new list that will hold the result. We will iterate through each element in the input list, and for each element, we will first add the specified element to the new list, followed by the current element from the input list. Finally, we will return the new list.\n\n3. **Write a pseudocode solution**:\n   ```\n   function insert_element(input_list, element):\n       create an empty list called result\n       for each item in input_list:\n           append element to result\n           append item to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef insert_element(input_list, element):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in input_list:\n        # Append the specified element to the result list\n        result.append(element)\n        # Append the current item from the input list to the result list\n        result.append(item)\n    \n    # Return the resulting list\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}