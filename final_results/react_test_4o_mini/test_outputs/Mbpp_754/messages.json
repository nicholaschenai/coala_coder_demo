[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English:**\n   We need to create a function that takes three lists as input and returns a new list containing elements that are the same in all three lists at the same index.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we will iterate through the indices of the lists. For each index, we will check if the elements at that index in all three lists are the same. If they are, we will add that element to a new list. Finally, we will return the new list containing all the common elements.\n\n3. **Write a pseudocode solution:**\n   ```\n   function extract_index_list(l1, l2, l3):\n       create an empty list called common_elements\n       for index from 0 to the length of l1 (or l2 or l3):\n           if l1[index] is equal to l2[index] and l2[index] is equal to l3[index]:\n               append l1[index] to common_elements\n       return common_elements\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef extract_index_list(l1, l2, l3):\n    # Create an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through the indices of the lists\n    for index in range(len(l1)):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[index] == l2[index] == l3[index]:\n            # If they are the same, add the element to the common_elements list\n            common_elements.append(l1[index])\n    \n    # Return the list of common elements\n    return common_elements\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]