{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_Monotonic([6, 5, 4, 4]) == True\n\nTests failed:\nNone",
    "code": "\ndef is_Monotonic(array):\n    # Check if the array is empty or has one element\n    if len(array) <= 1:\n        return True\n    \n    # Initialize flags to track if we have seen an increase or decrease\n    increasing = False\n    decreasing = False\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(array)):\n        # Check if the current element is greater than the previous one\n        if array[i] > array[i - 1]:\n            increasing = True\n        # Check if the current element is less than the previous one\n        elif array[i] < array[i - 1]:\n            decreasing = True\n        \n        # If we have seen both an increase and a decrease, return False\n        if increasing and decreasing:\n            return False\n    \n    # If we only saw increases or only saw decreases, return True\n    return True\n",
    "full_code": "\ndef is_Monotonic(array):\n    # Check if the array is empty or has one element\n    if len(array) <= 1:\n        return True\n    \n    # Initialize flags to track if we have seen an increase or decrease\n    increasing = False\n    decreasing = False\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(array)):\n        # Check if the current element is greater than the previous one\n        if array[i] > array[i - 1]:\n            increasing = True\n        # Check if the current element is less than the previous one\n        elif array[i] < array[i - 1]:\n            decreasing = True\n        \n        # If we have seen both an increase and a decrease, return False\n        if increasing and decreasing:\n            return False\n    \n    # If we only saw increases or only saw decreases, return True\n    return True\n",
    "reward": true,
    "program_code": "\ndef is_Monotonic(array):\n    # Check if the array is empty or has one element\n    if len(array) <= 1:\n        return True\n    \n    # Initialize flags to track if we have seen an increase or decrease\n    increasing = False\n    decreasing = False\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(array)):\n        # Check if the current element is greater than the previous one\n        if array[i] > array[i - 1]:\n            increasing = True\n        # Check if the current element is less than the previous one\n        elif array[i] < array[i - 1]:\n            decreasing = True\n        \n        # If we have seen both an increase and a decrease, return False\n        if increasing and decreasing:\n            return False\n    \n    # If we only saw increases or only saw decreases, return True\n    return True\n",
    "program_name": "is_Monotonic",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that checks if a given list of numbers is monotonic. A list is considered monotonic if it is either entirely non-increasing (each number is less than or equal to the previous one) or entirely non-decreasing (each number is greater than or equal to the previous one).\n\n2. **Conceptualize a solution first in plain English:**\n   To determine if the list is monotonic, we can iterate through the list and check the relationship between each pair of adjacent elements. We will keep track of whether we have seen an increase or a decrease. If we see both an increase and a decrease, we can conclude that the list is not monotonic. If we only see one type of relationship (either all increases or all decreases), then the list is monotonic.\n\n3. **Write a pseudocode solution:**\n   ```\n   function is_Monotonic(array):\n       if the array is empty or has one element:\n           return True\n       \n       initialize a variable to track if we have seen an increase\n       initialize a variable to track if we have seen a decrease\n       \n       for each index from 1 to the length of the array - 1:\n           if the current element is greater than the previous element:\n               set the increase variable to True\n           else if the current element is less than the previous element:\n               set the decrease variable to True\n           \n           if both increase and decrease are True:\n               return False\n       \n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef is_Monotonic(array):\n    # Check if the array is empty or has one element\n    if len(array) <= 1:\n        return True\n    \n    # Initialize flags to track if we have seen an increase or decrease\n    increasing = False\n    decreasing = False\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(array)):\n        # Check if the current element is greater than the previous one\n        if array[i] > array[i - 1]:\n            increasing = True\n        # Check if the current element is less than the previous one\n        elif array[i] < array[i - 1]:\n            decreasing = True\n        \n        # If we have seen both an increase and a decrease, return False\n        if increasing and decreasing:\n            return False\n    \n    # If we only saw increases or only saw decreases, return True\n    return True\n```",
    "no_parent": true,
    "dependency_used": false
}