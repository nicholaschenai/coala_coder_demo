{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\nTests failed:\nNone",
    "code": "\ndef neg_nos(input_list):\n    # Create an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in input_list:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n",
    "full_code": "\ndef neg_nos(input_list):\n    # Create an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in input_list:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n",
    "reward": true,
    "program_code": "\ndef neg_nos(input_list):\n    # Create an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in input_list:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n",
    "program_name": "neg_nos",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list of numbers and returns a new list containing only the negative numbers from the original list.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can iterate through each number in the input list. For each number, we will check if it is less than zero (i.e., negative). If it is, we will add it to a new list. Finally, we will return this new list containing only the negative numbers.\n\n3. **Write a pseudocode solution**:\n   ```\n   function neg_nos(input_list):\n       create an empty list called negative_numbers\n       for each number in input_list:\n           if number is less than 0:\n               add number to negative_numbers\n       return negative_numbers\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef neg_nos(input_list):\n    # Create an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in input_list:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n```",
    "no_parent": true,
    "dependency_used": false
}