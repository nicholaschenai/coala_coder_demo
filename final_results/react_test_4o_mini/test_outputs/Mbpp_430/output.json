{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert parabola_directrix(5,3,2)==-198 # output: 1",
    "code": "\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the discriminant\n    D = b**2 - 4 * a * c\n    # Calculate the directrix using the correct formula\n    directrix = -D / (4 * a) + (1 / (4 * a))\n    # Return the directrix value as an integer\n    return int(directrix)\n",
    "full_code": "\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the discriminant\n    D = b**2 - 4 * a * c\n    # Calculate the directrix using the correct formula\n    directrix = -D / (4 * a) + (1 / (4 * a))\n    # Return the directrix value as an integer\n    return int(directrix)\n",
    "reward": false,
    "program_code": "\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the discriminant\n    D = b**2 - 4 * a * c\n    # Calculate the directrix using the correct formula\n    directrix = -D / (4 * a) + (1 / (4 * a))\n    # Return the directrix value as an integer\n    return int(directrix)\n",
    "program_name": "parabola_directrix",
    "dependencies": [],
    "raw_msg": "Here is the corrected Python code that accurately calculates the directrix of a parabola based on the coefficients \\(a\\), \\(b\\), and \\(c\\):\n\n```python\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the discriminant\n    D = b**2 - 4 * a * c\n    # Calculate the directrix using the correct formula\n    directrix = -D / (4 * a) + (1 / (4 * a))\n    # Return the directrix value as an integer\n    return int(directrix)\n```",
    "no_parent": true,
    "dependency_used": false
}