{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\nTests failed:\nNone",
    "code": "\ndef sequential_search(array, element):\n    # Iterate through the array using index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n",
    "full_code": "\ndef sequential_search(array, element):\n    # Iterate through the array using index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n",
    "reward": true,
    "program_code": "\ndef sequential_search(array, element):\n    # Iterate through the array using index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n",
    "program_name": "sequential_search",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that checks if a specific element exists in a given list (array). If the element is found, the function should return a tuple containing `True` and the index of that element. If the element is not found, it should return a tuple containing `False` and `-1`.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we can iterate through the list and check each element to see if it matches the target element. If we find a match, we will return `True` along with the index of that element. If we finish checking all elements without finding a match, we will return `False` and `-1`.\n\n3. **Write a pseudocode solution:**\n   ```\n   function sequential_search(array, element):\n       for index from 0 to length of array - 1:\n           if array[index] is equal to element:\n               return (True, index)\n       return (False, -1)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef sequential_search(array, element):\n    # Iterate through the array using index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n```",
    "no_parent": true,
    "dependency_used": false
}