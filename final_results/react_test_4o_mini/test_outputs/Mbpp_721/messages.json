[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English:**\n   We need to find a path through a square matrix that starts at the top-left corner and ends at the bottom-right corner. The path can only move right or down. The goal is to calculate the maximum average cost of the cells visited along this path.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we can use dynamic programming. We will create a 2D list (or matrix) to store the maximum total cost and the number of cells visited to reach each cell in the matrix. Starting from the top-left corner, we will iterate through the matrix, updating our 2D list with the maximum costs and the corresponding number of cells for each possible path. Finally, we will calculate the average for the path that ends at the bottom-right corner and return that value.\n\n3. **Write a pseudocode solution:**\n   ```\n   function maxAverageOfPath(matrix):\n       get the size of the matrix N\n       create a 2D list dp to store tuples (total_cost, num_cells)\n       initialize dp[0][0] with (matrix[0][0], 1)\n       \n       for each cell in the matrix:\n           if moving down is possible:\n               update dp[i][j] with the maximum cost and number of cells\n           if moving right is possible:\n               update dp[i][j] with the maximum cost and number of cells\n       \n       get the total cost and number of cells from dp[N-1][N-1]\n       return total_cost / num_cells\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef maxAverageOfPath(matrix):\n    N = len(matrix)  # Get the size of the matrix\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]  # Create a 2D list for (total_cost, num_cells)\n    \n    dp[0][0] = (matrix[0][0], 1)  # Initialize the starting point\n\n    # Fill the dp table\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue  # Skip the starting cell\n            current_cost = matrix[i][j]\n            max_cost, num_cells = 0, 0\n            \n            # Check from the top cell\n            if i > 0:\n                top_cost, top_cells = dp[i-1][j]\n                if top_cost > max_cost:\n                    max_cost, num_cells = top_cost, top_cells\n            \n            # Check from the left cell\n            if j > 0:\n                left_cost, left_cells = dp[i][j-1]\n                if left_cost > max_cost:\n                    max_cost, num_cells = left_cost, left_cells\n            \n            # Update the dp table with the maximum cost and number of cells\n            dp[i][j] = (max_cost + current_cost, num_cells + 1)\n\n    # Get the total cost and number of cells from the bottom-right corner\n    total_cost, num_cells = dp[N-1][N-1]\n    return total_cost / num_cells  # Return the average\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]