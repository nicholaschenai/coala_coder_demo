{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert not is_perfect_square(10)\n\nTests failed:\nNone",
    "code": "\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root\n    root = int(n**0.5)\n    \n    # Check if squaring the root gives the original number\n    return root * root == n\n",
    "full_code": "\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root\n    root = int(n**0.5)\n    \n    # Check if squaring the root gives the original number\n    return root * root == n\n",
    "reward": true,
    "program_code": "\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root\n    root = int(n**0.5)\n    \n    # Check if squaring the root gives the original number\n    return root * root == n\n",
    "program_name": "is_perfect_square",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that determines if a given number is a perfect square. A perfect square is a number that can be expressed as the square of an integer. For example, 1, 4, 9, and 16 are perfect squares because they are 1\u00b2, 2\u00b2, 3\u00b2, and 4\u00b2 respectively. The function should return `True` if the number is a perfect square and `False` otherwise.\n\n2. **Conceptualize a solution first in plain English**: \n   To check if a number is a perfect square, we can take the integer square root of the number and then square that result. If squaring the integer square root gives us back the original number, then it is a perfect square. If not, it is not a perfect square.\n\n3. **Write a pseudocode solution**:\n   - Define a function `is_perfect_square` that takes an integer `n`.\n   - If `n` is less than 0, return `False` (since negative numbers cannot be perfect squares).\n   - Calculate the integer square root of `n` (let's call it `root`).\n   - If `root * root` equals `n`, return `True`.\n   - Otherwise, return `False`.\n\n4. **Output the final Python 3 solution**:\n```python\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root\n    root = int(n**0.5)\n    \n    # Check if squaring the root gives the original number\n    return root * root == n\n```",
    "no_parent": true,
    "dependency_used": false
}