{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_decimal('123.11')==True\n\nTests failed:\nNone",
    "code": "\ndef is_decimal(s: str) -> bool:\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Handle optional leading sign\n    if s[0] in ('-', '+'):\n        s = s[1:]  # Remove the sign for further checks\n    \n    # Split the string by the decimal point\n    parts = s.split('.')\n    \n    # Check if there is exactly one decimal point\n    if len(parts) != 2:\n        return False\n    \n    # Check if the part before the decimal point is valid (digits only)\n    if not parts[0].isdigit() and parts[0] != '':\n        return False\n    \n    # Check if the part after the decimal point has exactly two digits\n    if len(parts[1]) != 2 or not parts[1].isdigit():\n        return False\n    \n    # If all checks passed, return True\n    return True\n",
    "full_code": "\ndef is_decimal(s: str) -> bool:\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Handle optional leading sign\n    if s[0] in ('-', '+'):\n        s = s[1:]  # Remove the sign for further checks\n    \n    # Split the string by the decimal point\n    parts = s.split('.')\n    \n    # Check if there is exactly one decimal point\n    if len(parts) != 2:\n        return False\n    \n    # Check if the part before the decimal point is valid (digits only)\n    if not parts[0].isdigit() and parts[0] != '':\n        return False\n    \n    # Check if the part after the decimal point has exactly two digits\n    if len(parts[1]) != 2 or not parts[1].isdigit():\n        return False\n    \n    # If all checks passed, return True\n    return True\n",
    "reward": true,
    "program_code": "\ndef is_decimal(s: str) -> bool:\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Handle optional leading sign\n    if s[0] in ('-', '+'):\n        s = s[1:]  # Remove the sign for further checks\n    \n    # Split the string by the decimal point\n    parts = s.split('.')\n    \n    # Check if there is exactly one decimal point\n    if len(parts) != 2:\n        return False\n    \n    # Check if the part before the decimal point is valid (digits only)\n    if not parts[0].isdigit() and parts[0] != '':\n        return False\n    \n    # Check if the part after the decimal point has exactly two digits\n    if len(parts[1]) != 2 or not parts[1].isdigit():\n        return False\n    \n    # If all checks passed, return True\n    return True\n",
    "program_name": "is_decimal",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that checks if a given string represents a decimal number with exactly two digits after the decimal point. The function should return `True` if the string meets this criterion and `False` otherwise.\n\n2. **Conceptualize a solution first in plain English:**\n   To determine if a string is a valid decimal number with two decimal places, we can:\n   - Check if the string contains exactly one decimal point.\n   - Ensure that there are exactly two digits following the decimal point.\n   - Verify that the characters before the decimal point are digits (or can be empty if the number is less than 1).\n   - Handle cases where the string might be negative by allowing a leading '-' sign.\n\n3. **Write a pseudocode solution:**\n   ```\n   function is_decimal(s: string) -> bool:\n       if s is empty:\n           return False\n       if s starts with '-' or '+' (optional):\n           remove the sign\n       split s by '.' into parts\n       if length of parts is not 2:\n           return False\n       if length of parts[0] is not valid (not all digits):\n           return False\n       if length of parts[1] is not 2:\n           return False\n       if parts[1] is not valid (not all digits):\n           return False\n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef is_decimal(s: str) -> bool:\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Handle optional leading sign\n    if s[0] in ('-', '+'):\n        s = s[1:]  # Remove the sign for further checks\n    \n    # Split the string by the decimal point\n    parts = s.split('.')\n    \n    # Check if there is exactly one decimal point\n    if len(parts) != 2:\n        return False\n    \n    # Check if the part before the decimal point is valid (digits only)\n    if not parts[0].isdigit() and parts[0] != '':\n        return False\n    \n    # Check if the part after the decimal point has exactly two digits\n    if len(parts[1]) != 2 or not parts[1].isdigit():\n        return False\n    \n    # If all checks passed, return True\n    return True\n```",
    "no_parent": true,
    "dependency_used": false
}