[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list which may contain other lists (nested lists) and returns a single list with all the elements from the nested lists combined into one flat list.\n\n2. **Conceptualize a solution first in plain English**: \n   To flatten the list, we can iterate through each element of the input list. If an element is a list itself, we will need to go deeper into that list and extract its elements. If an element is not a list, we will simply add it to our result list. This process will continue recursively until all elements are extracted and combined into a single list.\n\n3. **Write a pseudocode solution**:\n   ```\n   function flatten_list(nested_list):\n       create an empty list called flat_list\n       for each element in nested_list:\n           if element is a list:\n               call flatten_list recursively on element and extend flat_list with the result\n           else:\n               append element to flat_list\n       return flat_list\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    flat_list = []\n    \n    # Iterate through each element in the provided nested list\n    for element in nested_list:\n        # Check if the current element is a list\n        if isinstance(element, list):\n            # If it is a list, recursively flatten it and extend the flat_list with the result\n            flat_list.extend(flatten_list(element))\n        else:\n            # If it is not a list, append the element to flat_list\n            flat_list.append(element)\n    \n    # Return the fully flattened list\n    return flat_list\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]