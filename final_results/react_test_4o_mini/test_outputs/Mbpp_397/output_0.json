{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert median_numbers(25,55,65)==55.0\n\nTests failed:\nNone",
    "code": "\ndef median_numbers(a: float, b: float, c: float) -> float:\n    # Create a list of the three numbers\n    numbers = [a, b, c]\n    # Sort the list of numbers\n    numbers.sort()\n    # Return the second element, which is the median\n    return numbers[1]\n",
    "full_code": "\ndef median_numbers(a: float, b: float, c: float) -> float:\n    # Create a list of the three numbers\n    numbers = [a, b, c]\n    # Sort the list of numbers\n    numbers.sort()\n    # Return the second element, which is the median\n    return numbers[1]\n",
    "reward": true,
    "program_code": "\ndef median_numbers(a: float, b: float, c: float) -> float:\n    # Create a list of the three numbers\n    numbers = [a, b, c]\n    # Sort the list of numbers\n    numbers.sort()\n    # Return the second element, which is the median\n    return numbers[1]\n",
    "program_name": "median_numbers",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes three numbers as input and returns the median of those three numbers. The median is the middle value when the numbers are sorted.\n\n2. **Conceptualize a solution first in plain English**: \n   To find the median of three numbers, we can sort the three numbers and then select the second number from the sorted list, as it will be the median. \n\n3. **Write a pseudocode solution**:\n   - Define a function named `median_numbers` that takes three parameters.\n   - Create a list containing the three numbers.\n   - Sort the list.\n   - Return the second element of the sorted list (which is the median).\n\n4. **Output the final Python 3 solution**:\n```python\ndef median_numbers(a: float, b: float, c: float) -> float:\n    # Create a list of the three numbers\n    numbers = [a, b, c]\n    # Sort the list of numbers\n    numbers.sort()\n    # Return the second element, which is the median\n    return numbers[1]\n```",
    "no_parent": true,
    "dependency_used": false
}