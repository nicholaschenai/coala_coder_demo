{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1} # output: {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}",
    "code": "\ndef check_occurences(tuples_list):\n    # Create an empty dictionary to store occurrences\n    occurrences = {}\n    \n    # Iterate through each tuple in the input list\n    for tup in tuples_list:\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            # Increment the count for this tuple\n            occurrences[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            occurrences[tup] = 1\n            \n    # Return the dictionary containing the counts of each tuple\n    return occurrences\n",
    "full_code": "\ndef check_occurences(tuples_list):\n    # Create an empty dictionary to store occurrences\n    occurrences = {}\n    \n    # Iterate through each tuple in the input list\n    for tup in tuples_list:\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            # Increment the count for this tuple\n            occurrences[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            occurrences[tup] = 1\n            \n    # Return the dictionary containing the counts of each tuple\n    return occurrences\n",
    "reward": false,
    "program_code": "\ndef check_occurences(tuples_list):\n    # Create an empty dictionary to store occurrences\n    occurrences = {}\n    \n    # Iterate through each tuple in the input list\n    for tup in tuples_list:\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            # Increment the count for this tuple\n            occurrences[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            occurrences[tup] = 1\n            \n    # Return the dictionary containing the counts of each tuple\n    return occurrences\n",
    "program_name": "check_occurences",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that takes a list of tuples as input and returns a dictionary. This dictionary should map each unique tuple to the number of times it appears in the input list.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we can iterate through the list of tuples and keep track of how many times each tuple appears. We can use a dictionary to store the tuples as keys and their counts as values. For each tuple in the list, we will check if it is already in the dictionary. If it is, we will increment its count; if it is not, we will add it to the dictionary with a count of 1. Finally, we will return the dictionary.\n\n3. **Write a pseudocode solution:**\n   ```\n   function check_occurences(tuples_list):\n       create an empty dictionary called occurrences\n       for each tuple in tuples_list:\n           if tuple is in occurrences:\n               increment occurrences[tuple] by 1\n           else:\n               set occurrences[tuple] to 1\n       return occurrences\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef check_occurences(tuples_list):\n    # Create an empty dictionary to store occurrences\n    occurrences = {}\n    \n    # Iterate through each tuple in the input list\n    for tup in tuples_list:\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            # Increment the count for this tuple\n            occurrences[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            occurrences[tup] = 1\n            \n    # Return the dictionary containing the counts of each tuple\n    return occurrences\n```",
    "no_parent": true,
    "dependency_used": false
}