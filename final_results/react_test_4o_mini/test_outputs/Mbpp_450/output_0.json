{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\nTests failed:\nNone",
    "code": "\ndef extract_string(string_list, length):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string is equal to the specified length\n        if len(string) == length:\n            # If it is, add the string to the result list\n            result.append(string)\n    # Return the list of strings that match the specified length\n    return result\n\n# The function can be called with the example provided:\n# extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n",
    "full_code": "\ndef extract_string(string_list, length):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string is equal to the specified length\n        if len(string) == length:\n            # If it is, add the string to the result list\n            result.append(string)\n    # Return the list of strings that match the specified length\n    return result\n\n# The function can be called with the example provided:\n# extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n",
    "reward": true,
    "program_code": "\ndef extract_string(string_list, length):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string is equal to the specified length\n        if len(string) == length:\n            # If it is, add the string to the result list\n            result.append(string)\n    # Return the list of strings that match the specified length\n    return result\n\n# The function can be called with the example provided:\n# extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n",
    "program_name": "extract_string",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that takes a list of strings and returns a new list containing only those strings that have a specific length. The length we are interested in is 8 characters.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we will iterate through each string in the provided list. For each string, we will check its length. If the length of the string is equal to 8, we will add it to a new list. Finally, we will return this new list containing only the strings of the specified length.\n\n3. **Write a pseudocode solution:**\n   ```\n   function extract_string(string_list, length):\n       create an empty list called result\n       for each string in string_list:\n           if the length of the string is equal to length:\n               add the string to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef extract_string(string_list, length):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string is equal to the specified length\n        if len(string) == length:\n            # If it is, add the string to the result list\n            result.append(string)\n    # Return the list of strings that match the specified length\n    return result\n\n# The function can be called with the example provided:\n# extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n```",
    "no_parent": true,
    "dependency_used": false
}