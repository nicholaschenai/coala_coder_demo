{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_upper(\"person\") ==\"PERSON\"\n\nTests failed:\nNone",
    "code": "\ndef is_upper(s: str) -> str:\n    # Initialize an empty string to hold the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase and append to result\n            result += chr(ord(char) - 32)\n        else:\n            # Append the character unchanged\n            result += char\n            \n    # Return the final uppercase string\n    return result\n",
    "full_code": "\ndef is_upper(s: str) -> str:\n    # Initialize an empty string to hold the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase and append to result\n            result += chr(ord(char) - 32)\n        else:\n            # Append the character unchanged\n            result += char\n            \n    # Return the final uppercase string\n    return result\n",
    "reward": true,
    "program_code": "\ndef is_upper(s: str) -> str:\n    # Initialize an empty string to hold the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase and append to result\n            result += chr(ord(char) - 32)\n        else:\n            # Append the character unchanged\n            result += char\n            \n    # Return the final uppercase string\n    return result\n",
    "program_name": "is_upper",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a string as input and returns the same string but in uppercase letters.\n\n2. **Conceptualize a solution first in plain English**: \n   To convert a string to uppercase, we can iterate through each character in the string, check if it is a lowercase letter, and if so, convert it to its uppercase equivalent. We can build a new string with these uppercase characters and return it.\n\n3. **Write a pseudocode solution**:\n   - Define a function named `is_upper` that takes a string `s` as an argument.\n   - Initialize an empty string `result` to store the uppercase characters.\n   - Loop through each character `char` in the string `s`.\n     - If `char` is between 'a' and 'z', convert it to uppercase by using the formula `chr(ord(char) - 32)` and append it to `result`.\n     - If `char` is not a lowercase letter, append it unchanged to `result`.\n   - Return the `result` string.\n\n4. **Output the final Python 3 solution**:\n```python\ndef is_upper(s: str) -> str:\n    # Initialize an empty string to hold the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase and append to result\n            result += chr(ord(char) - 32)\n        else:\n            # Append the character unchanged\n            result += char\n            \n    # Return the final uppercase string\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}