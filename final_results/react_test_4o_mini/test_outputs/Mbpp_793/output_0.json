{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert last([1,2,3],1) == 0\n\nTests failed:\nNone",
    "code": "\ndef last(array, element):\n    # Iterate through the array from the last index to the first\n    for index in range(len(array) - 1, -1, -1):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # Return the index of the last occurrence\n            return index\n    # If the element is not found, return -1\n    return -1\n",
    "full_code": "\ndef last(array, element):\n    # Iterate through the array from the last index to the first\n    for index in range(len(array) - 1, -1, -1):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # Return the index of the last occurrence\n            return index\n    # If the element is not found, return -1\n    return -1\n",
    "reward": true,
    "program_code": "\ndef last(array, element):\n    # Iterate through the array from the last index to the first\n    for index in range(len(array) - 1, -1, -1):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # Return the index of the last occurrence\n            return index\n    # If the element is not found, return -1\n    return -1\n",
    "program_name": "last",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that finds the last occurrence of a specified element in a sorted array. If the element is not found, the function should return -1.\n\n2. **Conceptualize a solution first in plain English:**\n   To find the last position of an element in a sorted array, we can iterate through the array from the end to the beginning. This way, we can stop as soon as we find the element, ensuring that we are capturing the last occurrence. If we reach the beginning of the array without finding the element, we return -1.\n\n3. **Write a pseudocode solution:**\n   ```\n   function last(array, element):\n       for index from length of array - 1 to 0:\n           if array[index] is equal to element:\n               return index\n       return -1\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef last(array, element):\n    # Iterate through the array from the last index to the first\n    for index in range(len(array) - 1, -1, -1):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # Return the index of the last occurrence\n            return index\n    # If the element is not found, return -1\n    return -1\n```",
    "no_parent": true,
    "dependency_used": false
}