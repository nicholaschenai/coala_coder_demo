{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\nTests failed:\nNone",
    "code": "\ndef find_first_occurrence(array, target):\n    # Iterate through the array using an index\n    for index in range(len(array)):\n        # Check if the current element is equal to the target\n        if array[index] == target:\n            # Return the index of the first occurrence\n            return index\n    # If the target is not found, return -1\n    return -1\n",
    "full_code": "\ndef find_first_occurrence(array, target):\n    # Iterate through the array using an index\n    for index in range(len(array)):\n        # Check if the current element is equal to the target\n        if array[index] == target:\n            # Return the index of the first occurrence\n            return index\n    # If the target is not found, return -1\n    return -1\n",
    "reward": true,
    "program_code": "\ndef find_first_occurrence(array, target):\n    # Iterate through the array using an index\n    for index in range(len(array)):\n        # Check if the current element is equal to the target\n        if array[index] == target:\n            # Return the index of the first occurrence\n            return index\n    # If the target is not found, return -1\n    return -1\n",
    "program_name": "find_first_occurrence",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a sorted list of numbers and a target number. The function should return the index of the first occurrence of the target number in the list. If the target number is not found, the function should return -1.\n\n2. **Conceptualize a solution first in plain English**: \n   Since the array is sorted, we can use a linear search to find the first occurrence of the target number. We will iterate through the list, and as soon as we find the target number, we will return its index. If we reach the end of the list without finding the target, we will return -1.\n\n3. **Write a pseudocode solution**:\n   ```\n   function find_first_occurrence(array, target):\n       for index from 0 to length of array - 1:\n           if array[index] is equal to target:\n               return index\n       return -1\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_first_occurrence(array, target):\n    # Iterate through the array using an index\n    for index in range(len(array)):\n        # Check if the current element is equal to the target\n        if array[index] == target:\n            # Return the index of the first occurrence\n            return index\n    # If the target is not found, return -1\n    return -1\n```",
    "no_parent": true,
    "dependency_used": false
}