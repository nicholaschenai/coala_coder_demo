{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert Split([1,2,3,4,5]) == [2,4]\n\nTests failed:\nNone",
    "code": "\ndef Split(numbers):\n    # Create an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, add it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n",
    "full_code": "\ndef Split(numbers):\n    # Create an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, add it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n",
    "reward": true,
    "program_code": "\ndef Split(numbers):\n    # Create an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, add it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n",
    "program_name": "Split",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list of numbers and returns a new list containing only the even numbers from the original list.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can iterate through each number in the input list, check if it is even (a number is even if it is divisible by 2 with no remainder), and if it is, we will add it to a new list. Finally, we will return this new list containing only the even numbers.\n\n3. **Write a pseudocode solution**:\n   ```\n   function Split(numbers):\n       create an empty list called even_numbers\n       for each number in numbers:\n           if number is even:\n               add number to even_numbers\n       return even_numbers\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef Split(numbers):\n    # Create an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate through each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, add it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n```",
    "no_parent": true,
    "dependency_used": false
}