INFO - [test iter]: 55/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function that takes in a sorted array, its length (n), and ...

INFO - Attempting task_id Mbpp/223
INFO - [35m Rollout attempt 1/4[0m
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/223 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""

[END PROBLEM]

INFO - [Task id] Mbpp/223 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/223 [generation text] 1. **Restate the problem in plain English:**
   We need to create a function that checks if a given element in a sorted array appears more than half the time (n/2) in that array. If it does, we return `True`, indicating that it is the majority element; otherwise, we return `False`.

2. **Conceptualize a solution first in plain English:**
   - First, we need to determine how many times the specified element appears in the array.
   - Since the array is sorted, we can find the first and last occurrence of the element using binary search.
   - We can then calculate the count of the element by subtracting the index of the first occurrence from the index of the last occurrence and adding one.
   - Finally, we compare this count to n/2 to determine if it is a majority element.

3. **Write a pseudocode solution:**
   ```
   function is_majority(arr, n, element):
       if n is 0:
           return False
       
       first_index = find_first_index(arr, element)
       if first_index is -1:
           return False
       
       last_index = find_last_index(arr, element)
       count = last_index - first_index + 1
       
       return count > n / 2

   function find_first_index(arr, element):
       // Implement binary search to find the first index of element

   function find_last_index(arr, element):
       // Implement binary search to find the last index of element
   ```

4. **Output the final Python 3 solution with your solution steps in comments:**
```python
def find_first_index(arr, element):
    left, right = 0, len(arr) - 1
    first_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            first_index = mid
            right = mid - 1  # continue searching in the left half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return first_index

def find_last_index(arr, element):
    left, right = 0, len(arr) - 1
    last_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            last_index = mid
            left = mid + 1  # continue searching in the right half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return last_index

def is_majority(arr, n, element):
    if n == 0:
        return False
    
    first_index = find_first_index(arr, element)
    if first_index == -1:
        return False
    
    last_index = find_last_index(arr, element)
    count = last_index - first_index + 1
    
    return count > n / 2
```
INFO - program_code:
 
def find_first_index(arr, element):
    left, right = 0, len(arr) - 1
    first_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            first_index = mid
            right = mid - 1  # continue searching in the left half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return first_index

def find_last_index(arr, element):
    left, right = 0, len(arr) - 1
    last_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            last_index = mid
            left = mid + 1  # continue searching in the right half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return last_index

def is_majority(arr, n, element):
    if n == 0:
        return False
    
    first_index = find_first_index(arr, element)
    if first_index == -1:
        return False
    
    last_index = find_last_index(arr, element)
    count = last_index - first_index + 1
    
    return count > n / 2


INFO - program_name:
 is_majority

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English:**
   We need to create a function that checks if a given element in a sorted array appears more than half the time (n/2) in that array. If it does, we return `True`, indicating that it is the majority element; otherwise, we return `False`.

2. **Conceptualize a solution first in plain English:**
   - First, we need to determine how many times the specified element appears in the array.
   - Since the array is sorted, we can find the first and last occurrence of the element using binary search.
   - We can then calculate the count of the element by subtracting the index of the first occurrence from the index of the last occurrence and adding one.
   - Finally, we compare this count to n/2 to determine if it is a majority element.

3. **Write a pseudocode solution:**
   ```
   function is_majority(arr, n, element):
       if n is 0:
           return False
       
       first_index = find_first_index(arr, element)
       if first_index is -1:
           return False
       
       last_index = find_last_index(arr, element)
       count = last_index - first_index + 1
       
       return count > n / 2

   function find_first_index(arr, element):
       // Implement binary search to find the first index of element

   function find_last_index(arr, element):
       // Implement binary search to find the last index of element
   ```

4. **Output the final Python 3 solution with your solution steps in comments:**
```python
def find_first_index(arr, element):
    left, right = 0, len(arr) - 1
    first_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            first_index = mid
            right = mid - 1  # continue searching in the left half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return first_index

def find_last_index(arr, element):
    left, right = 0, len(arr) - 1
    last_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            last_index = mid
            left = mid + 1  # continue searching in the right half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return last_index

def is_majority(arr, n, element):
    if n == 0:
        return False
    
    first_index = find_first_index(arr, element)
    if first_index == -1:
        return False
    
    last_index = find_last_index(arr, element)
    count = last_index - first_index + 1
    
    return count > n / 2
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def find_first_index(arr, element):
    left, right = 0, len(arr) - 1
    first_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            first_index = mid
            right = mid - 1  # continue searching in the left half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return first_index

def find_last_index(arr, element):
    left, right = 0, len(arr) - 1
    last_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            last_index = mid
            left = mid + 1  # continue searching in the right half
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return last_index

def is_majority(arr, n, element):
    if n == 0:
        return False
    
    first_index = find_first_index(arr, element)
    if first_index == -1:
        return False
    
    last_index = find_last_index(arr, element)
    count = last_index - first_index + 1
    
    return count > n / 2


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:54/55 = 98.18%
