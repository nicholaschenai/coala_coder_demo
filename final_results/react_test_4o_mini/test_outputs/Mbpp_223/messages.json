[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English:**\n   We need to create a function that checks if a given element in a sorted array appears more than half the time (n/2) in that array. If it does, we return `True`, indicating that it is the majority element; otherwise, we return `False`.\n\n2. **Conceptualize a solution first in plain English:**\n   - First, we need to determine how many times the specified element appears in the array.\n   - Since the array is sorted, we can find the first and last occurrence of the element using binary search.\n   - We can then calculate the count of the element by subtracting the index of the first occurrence from the index of the last occurrence and adding one.\n   - Finally, we compare this count to n/2 to determine if it is a majority element.\n\n3. **Write a pseudocode solution:**\n   ```\n   function is_majority(arr, n, element):\n       if n is 0:\n           return False\n       \n       first_index = find_first_index(arr, element)\n       if first_index is -1:\n           return False\n       \n       last_index = find_last_index(arr, element)\n       count = last_index - first_index + 1\n       \n       return count > n / 2\n\n   function find_first_index(arr, element):\n       // Implement binary search to find the first index of element\n\n   function find_last_index(arr, element):\n       // Implement binary search to find the last index of element\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef find_first_index(arr, element):\n    left, right = 0, len(arr) - 1\n    first_index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            first_index = mid\n            right = mid - 1  # continue searching in the left half\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return first_index\n\ndef find_last_index(arr, element):\n    left, right = 0, len(arr) - 1\n    last_index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            last_index = mid\n            left = mid + 1  # continue searching in the right half\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return last_index\n\ndef is_majority(arr, n, element):\n    if n == 0:\n        return False\n    \n    first_index = find_first_index(arr, element)\n    if first_index == -1:\n        return False\n    \n    last_index = find_last_index(arr, element)\n    count = last_index - first_index + 1\n    \n    return count > n / 2\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]