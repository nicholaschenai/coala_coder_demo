{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\nTests failed:\nNone",
    "code": "\ndef count_occurrences(nums):\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return count_dict\n\ndef two_unique_nums(nums):\n    count_dict = count_occurrences(nums)  # Count occurrences of each number\n    unique_nums = []  # List to store unique numbers\n    for num, count in count_dict.items():  # Iterate through the count dictionary\n        if count == 1:  # Check if the count is one\n            unique_nums.append(num)  # Add to unique numbers list\n    return unique_nums  # Return the list of unique numbers\n",
    "full_code": "\ndef count_occurrences(nums):\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return count_dict\n\ndef two_unique_nums(nums):\n    count_dict = count_occurrences(nums)  # Count occurrences of each number\n    unique_nums = []  # List to store unique numbers\n    for num, count in count_dict.items():  # Iterate through the count dictionary\n        if count == 1:  # Check if the count is one\n            unique_nums.append(num)  # Add to unique numbers list\n    return unique_nums  # Return the list of unique numbers\n",
    "reward": true,
    "program_code": "\ndef count_occurrences(nums):\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return count_dict\n\ndef two_unique_nums(nums):\n    count_dict = count_occurrences(nums)  # Count occurrences of each number\n    unique_nums = []  # List to store unique numbers\n    for num, count in count_dict.items():  # Iterate through the count dictionary\n        if count == 1:  # Check if the count is one\n            unique_nums.append(num)  # Add to unique numbers list\n    return unique_nums  # Return the list of unique numbers\n",
    "program_name": "two_unique_nums",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list of numbers and returns a new list containing only the numbers that appear exactly once in the original list. \n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can use a dictionary to count the occurrences of each number in the list. After counting, we can iterate through the dictionary to collect the numbers that have a count of one. Finally, we will return this collection as a list.\n\n3. **Write a pseudocode solution**:\n   - Define a function `two_unique_nums` that takes a list as input.\n   - Create an empty dictionary to store the count of each number.\n   - Loop through each number in the list:\n     - If the number is already in the dictionary, increment its count.\n     - If it is not in the dictionary, add it with a count of one.\n   - Create an empty list to store the unique numbers.\n   - Loop through the dictionary:\n     - If a number's count is one, add it to the unique numbers list.\n   - Return the list of unique numbers.\n\n4. **Output the final Python 3 solution**:\n```python\ndef count_occurrences(nums):\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return count_dict\n\ndef two_unique_nums(nums):\n    count_dict = count_occurrences(nums)  # Count occurrences of each number\n    unique_nums = []  # List to store unique numbers\n    for num, count in count_dict.items():  # Iterate through the count dictionary\n        if count == 1:  # Check if the count is one\n            unique_nums.append(num)  # Add to unique numbers list\n    return unique_nums  # Return the list of unique numbers\n```",
    "no_parent": true,
    "dependency_used": false
}