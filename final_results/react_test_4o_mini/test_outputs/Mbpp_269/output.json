{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert ascii_value('A')==65\n\nTests failed:\nNone",
    "code": "\n# Define a function that takes a single character as input\ndef ascii_value(character: str) -> int:\n    # Use the built-in ord() function to get the ASCII value of the character\n    return ord(character)\n",
    "full_code": "\n# Define a function that takes a single character as input\ndef ascii_value(character: str) -> int:\n    # Use the built-in ord() function to get the ASCII value of the character\n    return ord(character)\n",
    "reward": true,
    "program_code": "\n# Define a function that takes a single character as input\ndef ascii_value(character: str) -> int:\n    # Use the built-in ord() function to get the ASCII value of the character\n    return ord(character)\n",
    "program_name": "ascii_value",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a single character as input and returns its corresponding ASCII value.\n\n2. **Conceptualize a solution first in plain English**: \n   To find the ASCII value of a character, we can use Python's built-in `ord()` function, which converts a character to its ASCII integer value. The function will take one character as input and return the result of `ord()` applied to that character.\n\n3. **Write a pseudocode solution**:\n   ```\n   FUNCTION ascii_value(character):\n       RETURN ord(character)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\n# Define a function that takes a single character as input\ndef ascii_value(character: str) -> int:\n    # Use the built-in ord() function to get the ASCII value of the character\n    return ord(character)\n```",
    "no_parent": true,
    "dependency_used": false
}