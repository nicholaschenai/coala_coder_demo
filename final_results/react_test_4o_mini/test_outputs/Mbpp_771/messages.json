[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English**: \n   We need to create a function that checks if a given string of brackets (parentheses, curly braces, and square brackets) is balanced. A string is considered balanced if every opening bracket has a corresponding closing bracket in the correct order.\n\n2. **Conceptualize a solution first in plain English**: \n   To determine if the expression is balanced, we can use a stack data structure. We will iterate through each character in the string:\n   - If we encounter an opening bracket (i.e., '(', '{', or '['), we will push it onto the stack.\n   - If we encounter a closing bracket (i.e., ')', '}', or ']'), we will check if the stack is not empty and if the top of the stack is the corresponding opening bracket. If it is, we pop the top of the stack. If not, the expression is unbalanced.\n   - At the end of the iteration, if the stack is empty, the expression is balanced; otherwise, it is unbalanced.\n\n3. **Write a pseudocode solution**:\n   ```\n   function check_expression(expression):\n       create an empty stack\n       for each character in expression:\n           if character is '(', '{', or '[':\n               push character onto the stack\n           else if character is ')', '}', or ']':\n               if stack is empty:\n                   return False\n               top = pop from stack\n               if character does not match top:\n                   return False\n       return True if stack is empty, else return False\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef check_expression(expression: str) -> bool:\n    # Create an empty stack to keep track of opening brackets\n    stack = []\n    \n    # Define a mapping of closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        # If the character is one of the closing brackets\n        if char in bracket_map:\n            # Check if the stack is empty\n            if not stack:\n                return False\n            # Pop the top element from the stack\n            top = stack.pop()\n            # Check if the popped element matches the corresponding opening bracket\n            if bracket_map[char] != top:\n                return False\n        # If the character is one of the opening brackets, push it onto the stack\n        elif char in bracket_map.values():\n            stack.append(char)\n    \n    # If the stack is empty, all brackets were balanced; otherwise, they were not\n    return len(stack) == 0\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert check_expression(\"{()}[{}]\") == True\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]