{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\nTests failed:\nNone",
    "code": "\ndef pair_wise(input_list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the list up to the second-to-last item\n    for i in range(len(input_list) - 1):\n        # Create a tuple of the current item and the next item\n        pair = (input_list[i], input_list[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    \n    # Return the list of pairs\n    return result\n",
    "full_code": "\ndef pair_wise(input_list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the list up to the second-to-last item\n    for i in range(len(input_list) - 1):\n        # Create a tuple of the current item and the next item\n        pair = (input_list[i], input_list[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    \n    # Return the list of pairs\n    return result\n",
    "reward": true,
    "program_code": "\ndef pair_wise(input_list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the list up to the second-to-last item\n    for i in range(len(input_list) - 1):\n        # Create a tuple of the current item and the next item\n        pair = (input_list[i], input_list[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    \n    # Return the list of pairs\n    return result\n",
    "program_name": "pair_wise",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that takes a list of items and returns a new list containing pairs of consecutive items from the original list. Each pair should be represented as a tuple.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we can iterate through the given list and for each item, we will create a tuple with the current item and the next item. We will continue this until we reach the second-to-last item in the list, as the last item does not have a consecutive item to pair with.\n\n3. **Write a pseudocode solution:**\n   ```\n   function pair_wise(input_list):\n       initialize an empty list called result\n       for i from 0 to length of input_list - 2:\n           create a tuple with input_list[i] and input_list[i + 1]\n           append this tuple to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef pair_wise(input_list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the list up to the second-to-last item\n    for i in range(len(input_list) - 1):\n        # Create a tuple of the current item and the next item\n        pair = (input_list[i], input_list[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    \n    # Return the list of pairs\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}