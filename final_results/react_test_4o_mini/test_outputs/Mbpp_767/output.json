{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert get_pairs_count([1,1,1,1],2) == 6\n\nTests failed:\nNone",
    "code": "\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the pairs\n    count = 0\n    # Create a dictionary to count occurrences of each number\n    num_count = {}\n    \n    # Count occurrences of each number\n    for num in numbers:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    # Check pairs\n    for num in num_count:\n        complement = target_sum - num\n        if complement in num_count:\n            if num == complement:\n                # If both numbers are the same, count combinations\n                count += (num_count[num] * (num_count[num] - 1)) // 2\n            elif num < complement:  # To avoid double counting\n                count += num_count[num] * num_count[complement]\n    \n    return count\n",
    "full_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the pairs\n    count = 0\n    # Create a dictionary to count occurrences of each number\n    num_count = {}\n    \n    # Count occurrences of each number\n    for num in numbers:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    # Check pairs\n    for num in num_count:\n        complement = target_sum - num\n        if complement in num_count:\n            if num == complement:\n                # If both numbers are the same, count combinations\n                count += (num_count[num] * (num_count[num] - 1)) // 2\n            elif num < complement:  # To avoid double counting\n                count += num_count[num] * num_count[complement]\n    \n    return count\n",
    "reward": true,
    "program_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the pairs\n    count = 0\n    # Create a dictionary to count occurrences of each number\n    num_count = {}\n    \n    # Count occurrences of each number\n    for num in numbers:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    # Check pairs\n    for num in num_count:\n        complement = target_sum - num\n        if complement in num_count:\n            if num == complement:\n                # If both numbers are the same, count combinations\n                count += (num_count[num] * (num_count[num] - 1)) // 2\n            elif num < complement:  # To avoid double counting\n                count += num_count[num] * num_count[complement]\n    \n    return count\n",
    "program_name": "get_pairs_count",
    "dependencies": [],
    "raw_msg": "```python\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the pairs\n    count = 0\n    # Create a dictionary to count occurrences of each number\n    num_count = {}\n    \n    # Count occurrences of each number\n    for num in numbers:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    # Check pairs\n    for num in num_count:\n        complement = target_sum - num\n        if complement in num_count:\n            if num == complement:\n                # If both numbers are the same, count combinations\n                count += (num_count[num] * (num_count[num] - 1)) // 2\n            elif num < complement:  # To avoid double counting\n                count += num_count[num] * num_count[complement]\n    \n    return count\n```",
    "no_parent": true,
    "dependency_used": false
}