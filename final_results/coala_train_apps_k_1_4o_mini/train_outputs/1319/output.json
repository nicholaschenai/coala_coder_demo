{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['10 3', '1', '3', '7', '6', '-1', '5', '-1', '18', '9', '11', '2', '-1', '4'] Output: 7\n6\n18\n\nTests failed:\nNone",
    "code": "\ndef find_richest_citizens():\n    # Initialize a list to store the wealth of citizens\n    wealth_list = []\n    # Initialize a set to keep track of beheaded citizens\n    beheaded = set()\n    \n    # Read N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Process the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        if line == '-1':\n            # King visits, find the richest citizen who is not beheaded\n            richest_wealth = -1\n            richest_index = -1\n            \n            for index, wealth in enumerate(wealth_list):\n                if index not in beheaded and wealth > richest_wealth:\n                    richest_wealth = wealth\n                    richest_index = index\n            \n            # Mark the richest citizen as beheaded\n            beheaded.add(richest_index)\n            # Output the wealth of the beheaded citizen\n            print(richest_wealth)\n        else:\n            # Add the wealth of the citizen to the list\n            wealth_list.append(int(line))\n\n# Call the function to execute the solution\nfind_richest_citizens()\n",
    "full_code": "\ndef find_richest_citizens():\n    # Initialize a list to store the wealth of citizens\n    wealth_list = []\n    # Initialize a set to keep track of beheaded citizens\n    beheaded = set()\n    \n    # Read N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Process the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        if line == '-1':\n            # King visits, find the richest citizen who is not beheaded\n            richest_wealth = -1\n            richest_index = -1\n            \n            for index, wealth in enumerate(wealth_list):\n                if index not in beheaded and wealth > richest_wealth:\n                    richest_wealth = wealth\n                    richest_index = index\n            \n            # Mark the richest citizen as beheaded\n            beheaded.add(richest_index)\n            # Output the wealth of the beheaded citizen\n            print(richest_wealth)\n        else:\n            # Add the wealth of the citizen to the list\n            wealth_list.append(int(line))\n\n# Call the function to execute the solution\nfind_richest_citizens()\n",
    "reward": true,
    "program_code": "\ndef find_richest_citizens():\n    # Initialize a list to store the wealth of citizens\n    wealth_list = []\n    # Initialize a set to keep track of beheaded citizens\n    beheaded = set()\n    \n    # Read N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Process the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        if line == '-1':\n            # King visits, find the richest citizen who is not beheaded\n            richest_wealth = -1\n            richest_index = -1\n            \n            for index, wealth in enumerate(wealth_list):\n                if index not in beheaded and wealth > richest_wealth:\n                    richest_wealth = wealth\n                    richest_index = index\n            \n            # Mark the richest citizen as beheaded\n            beheaded.add(richest_index)\n            # Output the wealth of the beheaded citizen\n            print(richest_wealth)\n        else:\n            # Add the wealth of the citizen to the list\n            wealth_list.append(int(line))\n\n# Call the function to execute the solution\nfind_richest_citizens()\n",
    "program_name": "find_richest_citizens",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   The problem involves a king who wants to eliminate corrupt citizens based on their wealth. Citizens declare their wealth one by one, and whenever the king visits, the prime minister must identify and behead the richest citizen who has appeared so far and is still alive. The input consists of the number of citizens and the number of king's visits, followed by a sequence of wealth declarations and king's visits. The output should be the wealth of the citizens beheaded during each of the king's visits.\n\n2. **Conceptualize a solution first in plain English:**\n   We need to keep track of the wealth of citizens as they declare it. When the king visits, we should quickly find the richest citizen who has declared their wealth and has not been beheaded yet. To efficiently manage this, we can use a list to store the wealth of citizens and a variable to keep track of the richest citizen. Each time the king visits, we will find the maximum wealth from the list of declared citizens, mark that citizen as beheaded, and then output their wealth.\n\n3. **Write a pseudocode solution:**\n   ```\n   Initialize an empty list to store the wealth of citizens\n   Initialize an empty set to keep track of beheaded citizens\n   Read N and M from input\n   For each of the next N + M lines:\n       If the line is a positive integer (wealth):\n           Append the wealth to the list\n       Else if the line is -1 (king's visit):\n           Find the maximum wealth from the list of citizens who are not beheaded\n           Mark that citizen as beheaded\n           Output the wealth of the beheaded citizen\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef find_richest_citizens():\n    # Initialize a list to store the wealth of citizens\n    wealth_list = []\n    # Initialize a set to keep track of beheaded citizens\n    beheaded = set()\n    \n    # Read N (number of citizens) and M (number of king's visits)\n    N, M = map(int, input().split())\n    \n    # Process the next N + M lines\n    for _ in range(N + M):\n        line = input().strip()\n        if line == '-1':\n            # King visits, find the richest citizen who is not beheaded\n            richest_wealth = -1\n            richest_index = -1\n            \n            for index, wealth in enumerate(wealth_list):\n                if index not in beheaded and wealth > richest_wealth:\n                    richest_wealth = wealth\n                    richest_index = index\n            \n            # Mark the richest citizen as beheaded\n            beheaded.add(richest_index)\n            # Output the wealth of the beheaded citizen\n            print(richest_wealth)\n        else:\n            # Add the wealth of the citizen to the list\n            wealth_list.append(int(line))\n\n# Call the function to execute the solution\nfind_richest_citizens()\n```",
    "no_parent": false,
    "dependency_used": false
}