{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '4', '1 0 1 0', '0 0 0 1', '0 1 0 0', '1 0 0 1', '4', '1 0 1 0', '0 0 0 0', '1 0 1 1', '0 1 0 0'] Output: SAFE\nUNSAFE\n\nTests failed:\nNone",
    "code": "\ndef is_safe(arr, N):\n    # Iterate through each cell in the grid\n    for i in range(N):\n        for j in range(N):\n            if arr[i][j] == 1:  # Found a bed\n                # Check adjacent cells for another bed\n                if (i > 0 and arr[i-1][j] == 1) or (i < N-1 and arr[i+1][j] == 1) or \\\n                   (j > 0 and arr[i][j-1] == 1) or (j < N-1 and arr[i][j+1] == 1):\n                    return \"UNSAFE\"  # Found adjacent beds\n    return \"SAFE\"  # No adjacent beds found\n\n# Read number of test cases\nT = int(input())\nfor _ in range(T):\n    N = int(input())  # Read the size of the grid\n    arr = []  # Initialize the grid\n    for i in range(N):\n        row = list(map(int, input().split()))  # Read each row\n        arr.append(row)  # Add the row to the grid\n    result = is_safe(arr, N)  # Check if the arrangement is safe\n    print(result)  # Output the result\n",
    "full_code": "\ndef is_safe(arr, N):\n    # Iterate through each cell in the grid\n    for i in range(N):\n        for j in range(N):\n            if arr[i][j] == 1:  # Found a bed\n                # Check adjacent cells for another bed\n                if (i > 0 and arr[i-1][j] == 1) or (i < N-1 and arr[i+1][j] == 1) or \\\n                   (j > 0 and arr[i][j-1] == 1) or (j < N-1 and arr[i][j+1] == 1):\n                    return \"UNSAFE\"  # Found adjacent beds\n    return \"SAFE\"  # No adjacent beds found\n\n# Read number of test cases\nT = int(input())\nfor _ in range(T):\n    N = int(input())  # Read the size of the grid\n    arr = []  # Initialize the grid\n    for i in range(N):\n        row = list(map(int, input().split()))  # Read each row\n        arr.append(row)  # Add the row to the grid\n    result = is_safe(arr, N)  # Check if the arrangement is safe\n    print(result)  # Output the result\n",
    "reward": true,
    "program_code": "\ndef is_safe(arr, N):\n    # Iterate through each cell in the grid\n    for i in range(N):\n        for j in range(N):\n            if arr[i][j] == 1:  # Found a bed\n                # Check adjacent cells for another bed\n                if (i > 0 and arr[i-1][j] == 1) or (i < N-1 and arr[i+1][j] == 1) or \\\n                   (j > 0 and arr[i][j-1] == 1) or (j < N-1 and arr[i][j+1] == 1):\n                    return \"UNSAFE\"  # Found adjacent beds\n    return \"SAFE\"  # No adjacent beds found\n\n# Read number of test cases\nT = int(input())\nfor _ in range(T):\n    N = int(input())  # Read the size of the grid\n    arr = []  # Initialize the grid\n    for i in range(N):\n        row = list(map(int, input().split()))  # Read each row\n        arr.append(row)  # Add the row to the grid\n    result = is_safe(arr, N)  # Check if the arrangement is safe\n    print(result)  # Output the result\n",
    "program_name": "is_safe",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   The problem involves checking a grid that represents a hospital area where beds are placed. Each cell in the grid can either have a bed (represented by `1`) or not (represented by `0`). The goal is to determine if the arrangement of beds is \"SAFE\" or \"UNSAFE\". An arrangement is considered \"SAFE\" if no two beds are adjacent to each other horizontally or vertically. Beds placed diagonally do not count as adjacent.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we need to iterate through each test case and check the grid for any adjacent beds. For each bed found, we will check its immediate neighbors (up, down, left, right) to see if they also contain a bed. If we find any adjacent beds, we will mark the arrangement as \"UNSAFE\". If we finish checking the entire grid without finding any adjacent beds, we will mark it as \"SAFE\".\n\n3. **Write a pseudocode solution:**\n   ```\n   function is_safe(arr, N):\n       for i from 0 to N-1:\n           for j from 0 to N-1:\n               if arr[i][j] == 1:  # Found a bed\n                   # Check adjacent cells\n                   if (i > 0 and arr[i-1][j] == 1) or (i < N-1 and arr[i+1][j] == 1) or \n                      (j > 0 and arr[i][j-1] == 1) or (j < N-1 and arr[i][j+1] == 1):\n                       return \"UNSAFE\"\n       return \"SAFE\"\n\n   read T\n   for each test case:\n       read N\n       create a 2D array arr of size N x N\n       for i from 0 to N-1:\n           read row of arr\n       result = is_safe(arr, N)\n       print result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef is_safe(arr, N):\n    # Iterate through each cell in the grid\n    for i in range(N):\n        for j in range(N):\n            if arr[i][j] == 1:  # Found a bed\n                # Check adjacent cells for another bed\n                if (i > 0 and arr[i-1][j] == 1) or (i < N-1 and arr[i+1][j] == 1) or \\\n                   (j > 0 and arr[i][j-1] == 1) or (j < N-1 and arr[i][j+1] == 1):\n                    return \"UNSAFE\"  # Found adjacent beds\n    return \"SAFE\"  # No adjacent beds found\n\n# Read number of test cases\nT = int(input())\nfor _ in range(T):\n    N = int(input())  # Read the size of the grid\n    arr = []  # Initialize the grid\n    for i in range(N):\n        row = list(map(int, input().split()))  # Read each row\n        arr.append(row)  # Add the row to the grid\n    result = is_safe(arr, N)  # Check if the arrangement is safe\n    print(result)  # Output the result\n```",
    "no_parent": false,
    "dependency_used": false
}