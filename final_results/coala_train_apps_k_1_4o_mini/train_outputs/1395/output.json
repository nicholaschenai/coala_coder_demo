{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '2 6'] Output: 3\n\nTests failed:\nNone",
    "code": "\ndef count_divisors(n):\n    # Initialize the count of divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    # Read the number of test cases\n    T = int(input())\n    for _ in range(T):\n        # Read the roll numbers of Ram and Shyam\n        A, B = map(int, input().split())\n        if A == B:\n            print(-1)  # Infinite possibilities if roll numbers are the same\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of divisors\n\n# Call the main function to execute the solution\nmain()\n",
    "full_code": "\ndef count_divisors(n):\n    # Initialize the count of divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    # Read the number of test cases\n    T = int(input())\n    for _ in range(T):\n        # Read the roll numbers of Ram and Shyam\n        A, B = map(int, input().split())\n        if A == B:\n            print(-1)  # Infinite possibilities if roll numbers are the same\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of divisors\n\n# Call the main function to execute the solution\nmain()\n",
    "reward": true,
    "program_code": "\ndef count_divisors(n):\n    # Initialize the count of divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    # Read the number of test cases\n    T = int(input())\n    for _ in range(T):\n        # Read the roll numbers of Ram and Shyam\n        A, B = map(int, input().split())\n        if A == B:\n            print(-1)  # Infinite possibilities if roll numbers are the same\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of divisors\n\n# Call the main function to execute the solution\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   Ram and Shyam have distinct roll numbers, and they receive exam question sets based on their roll numbers. We need to find out how many different numbers of question sets (denoted as `p`) would allow them to receive the same set of questions. If there are infinitely many such `p`, we should return `-1`.\n\n2. **Conceptualize a solution first in plain English:**\n   To determine when Ram and Shyam receive the same set of questions, we need to check when the modulo operation on their roll numbers results in the same value. This can be expressed mathematically as:\n   \\[\n   (A - 1) \\% p = (B - 1) \\% p\n   \\]\n   This simplifies to checking when:\n   \\[\n   (A - B) \\% p = 0\n   \\]\n   This means that `p` must be a divisor of the absolute difference between their roll numbers, `|A - B|`. If `A` equals `B`, they will always receive the same set for any `p`, leading to infinite possibilities. Otherwise, we need to count the divisors of `|A - B|`.\n\n3. **Write a pseudocode solution:**\n   ```\n   function count_divisors(n):\n       count = 0\n       for i from 1 to sqrt(n):\n           if n % i == 0:\n               count += 1\n               if i != n / i:\n                   count += 1\n       return count\n\n   function main():\n       read integer T\n       for each test case:\n           read integers A and B\n           if A == B:\n               print -1\n           else:\n               difference = abs(A - B)\n               divisors_count = count_divisors(difference)\n               print divisors_count\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef count_divisors(n):\n    # Initialize the count of divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # Count i\n            if i != n // i:  # Check if the corresponding divisor is different\n                count += 1  # Count the corresponding divisor\n    return count\n\ndef main():\n    # Read the number of test cases\n    T = int(input())\n    for _ in range(T):\n        # Read the roll numbers of Ram and Shyam\n        A, B = map(int, input().split())\n        if A == B:\n            print(-1)  # Infinite possibilities if roll numbers are the same\n        else:\n            difference = abs(A - B)  # Calculate the absolute difference\n            divisors_count = count_divisors(difference)  # Count the divisors of the difference\n            print(divisors_count)  # Output the count of divisors\n\n# Call the main function to execute the solution\nmain()\n```",
    "no_parent": false,
    "dependency_used": false
}