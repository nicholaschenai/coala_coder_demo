{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'blue yellow green orange black green', 'green yellow green orange black green'] Output: NO\nYES\n\nTests failed:\nNone",
    "code": "\ndef check_adjacent_colors(test_cases):\n    for colors in test_cases:\n        # Extract colors for each side of the cube\n        front, back, left, right, top, bottom = colors\n        \n        # Check the combinations of adjacent sides\n        if (front == left == top) or (front == right == top) or \\\n           (front == left == bottom) or (front == right == bottom) or \\\n           (back == left == top) or (back == right == top) or \\\n           (back == left == bottom) or (back == right == bottom):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read colors for the six sides\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function to check for adjacent colors\ncheck_adjacent_colors(test_cases)\n",
    "full_code": "\ndef check_adjacent_colors(test_cases):\n    for colors in test_cases:\n        # Extract colors for each side of the cube\n        front, back, left, right, top, bottom = colors\n        \n        # Check the combinations of adjacent sides\n        if (front == left == top) or (front == right == top) or \\\n           (front == left == bottom) or (front == right == bottom) or \\\n           (back == left == top) or (back == right == top) or \\\n           (back == left == bottom) or (back == right == bottom):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read colors for the six sides\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function to check for adjacent colors\ncheck_adjacent_colors(test_cases)\n",
    "reward": true,
    "program_code": "\ndef check_adjacent_colors(test_cases):\n    for colors in test_cases:\n        # Extract colors for each side of the cube\n        front, back, left, right, top, bottom = colors\n        \n        # Check the combinations of adjacent sides\n        if (front == left == top) or (front == right == top) or \\\n           (front == left == bottom) or (front == right == bottom) or \\\n           (back == left == top) or (back == right == top) or \\\n           (back == left == bottom) or (back == right == bottom):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read colors for the six sides\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function to check for adjacent colors\ncheck_adjacent_colors(test_cases)\n",
    "program_name": "check_adjacent_colors",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   The problem involves checking if it is possible to select three adjacent sides of a cube that are all painted the same color. Each cube has six sides, and the colors of these sides are provided as input. We need to determine for multiple test cases whether such a selection is possible.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we need to identify the pairs of adjacent sides on a cube. The pairs of adjacent sides that can be selected are:\n   - Front, Left, Top\n   - Front, Right, Top\n   - Front, Left, Bottom\n   - Front, Right, Bottom\n   - Back, Left, Top\n   - Back, Right, Top\n   - Back, Left, Bottom\n   - Back, Right, Bottom\n\n   For each test case, we will check if any of these combinations of three sides have the same color. If at least one combination matches, we will output \"YES\"; otherwise, we will output \"NO\".\n\n3. **Write a pseudocode solution:**\n   ```\n   function check_adjacent_colors(test_cases):\n       for each test_case in test_cases:\n           read colors of the six sides\n           check the following combinations:\n               - front, left, top\n               - front, right, top\n               - front, left, bottom\n               - front, right, bottom\n               - back, left, top\n               - back, right, top\n               - back, left, bottom\n               - back, right, bottom\n           if any combination has the same color:\n               output \"YES\"\n           else:\n               output \"NO\"\n\n   read number of test cases T\n   for i from 1 to T:\n       read colors for the six sides\n       store in test_cases\n   call check_adjacent_colors(test_cases)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef check_adjacent_colors(test_cases):\n    for colors in test_cases:\n        # Extract colors for each side of the cube\n        front, back, left, right, top, bottom = colors\n        \n        # Check the combinations of adjacent sides\n        if (front == left == top) or (front == right == top) or \\\n           (front == left == bottom) or (front == right == bottom) or \\\n           (back == left == top) or (back == right == top) or \\\n           (back == left == bottom) or (back == right == bottom):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read colors for the six sides\n    colors = input().split()\n    test_cases.append(colors)\n\n# Call the function to check for adjacent colors\ncheck_adjacent_colors(test_cases)\n```",
    "no_parent": false,
    "dependency_used": false
}