{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Expected output: [{'Fancy', 'Real'}, {'fancy', 'regularly'}] # Execution output: ['Real Fancy', 'Real Fancy']",
    "code": "\ndef classify_quotes(T, quotes):\n    # Iterate through each quote\n    for quote in quotes:\n        # Check if the substring \"not\" is present in the quote\n        if \"not\" in quote:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote into a list\nquotes = [input().strip() for _ in range(T)]\n# Classify the quotes\nclassify_quotes(T, quotes)\n",
    "full_code": "\ndef classify_quotes(T, quotes):\n    # Iterate through each quote\n    for quote in quotes:\n        # Check if the substring \"not\" is present in the quote\n        if \"not\" in quote:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote into a list\nquotes = [input().strip() for _ in range(T)]\n# Classify the quotes\nclassify_quotes(T, quotes)\n",
    "reward": false,
    "program_code": "\ndef classify_quotes(T, quotes):\n    # Iterate through each quote\n    for quote in quotes:\n        # Check if the substring \"not\" is present in the quote\n        if \"not\" in quote:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote into a list\nquotes = [input().strip() for _ in range(T)]\n# Classify the quotes\nclassify_quotes(T, quotes)\n",
    "program_name": "classify_quotes",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to classify quotes as \"Real Fancy\" or \"regularly fancy\" based on whether they contain the word \"not\". If a quote contains \"not\", it is classified as \"Real Fancy\"; otherwise, it is classified as \"regularly fancy\".\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we will:\n   - Read the number of quotes.\n   - For each quote, check if the substring \"not\" is present.\n   - Print \"Real Fancy\" if \"not\" is found, otherwise print \"regularly fancy\".\n\n3. **Write a pseudocode solution:**\n   ```\n   function classify_quotes(T, quotes):\n       for each quote in quotes:\n           if \"not\" in quote:\n               print \"Real Fancy\"\n           else:\n               print \"regularly fancy\"\n\n   read T\n   read quotes\n   classify_quotes(T, quotes)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef classify_quotes(T, quotes):\n    # Iterate through each quote\n    for quote in quotes:\n        # Check if the substring \"not\" is present in the quote\n        if \"not\" in quote:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote into a list\nquotes = [input().strip() for _ in range(T)]\n# Classify the quotes\nclassify_quotes(T, quotes)\n```",
    "no_parent": false,
    "dependency_used": false
}