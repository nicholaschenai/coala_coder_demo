{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['3 3', '16 24 60', '498 861 589', '14 24 62', '72 557 819', '16 15 69', '435 779 232'] Output: 2\n1\n3\n\nTests failed:\nNone",
    "code": "\ndef sort_problems_by_difficulty():\n    # Read the number of problems (P) and subtasks (S)\n    P, S = map(int, input().split())\n    difficulties = []  # List to store the difficulty of each problem\n\n    # Process each problem\n    for i in range(1, P + 1):\n        # Read scores and number of contestants for the current problem\n        scores = list(map(int, input().split()))\n        contestants = list(map(int, input().split()))\n        \n        # Pair scores with contestants and sort by score\n        paired = sorted(zip(scores, contestants))\n        \n        # Count the number of valid indices where NS_k > NS_{k + 1}\n        count = 0\n        for k in range(S - 1):\n            if paired[k][1] > paired[k + 1][1]:\n                count += 1\n        \n        # Store the difficulty as a tuple (count, problem index)\n        difficulties.append((count, i))\n\n    # Sort the difficulties by (count, index)\n    difficulties.sort()\n\n    # Print the indices of the problems in sorted order\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Call the function to execute the solution\nsort_problems_by_difficulty()\n",
    "full_code": "\ndef sort_problems_by_difficulty():\n    # Read the number of problems (P) and subtasks (S)\n    P, S = map(int, input().split())\n    difficulties = []  # List to store the difficulty of each problem\n\n    # Process each problem\n    for i in range(1, P + 1):\n        # Read scores and number of contestants for the current problem\n        scores = list(map(int, input().split()))\n        contestants = list(map(int, input().split()))\n        \n        # Pair scores with contestants and sort by score\n        paired = sorted(zip(scores, contestants))\n        \n        # Count the number of valid indices where NS_k > NS_{k + 1}\n        count = 0\n        for k in range(S - 1):\n            if paired[k][1] > paired[k + 1][1]:\n                count += 1\n        \n        # Store the difficulty as a tuple (count, problem index)\n        difficulties.append((count, i))\n\n    # Sort the difficulties by (count, index)\n    difficulties.sort()\n\n    # Print the indices of the problems in sorted order\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Call the function to execute the solution\nsort_problems_by_difficulty()\n",
    "reward": true,
    "program_code": "\ndef sort_problems_by_difficulty():\n    # Read the number of problems (P) and subtasks (S)\n    P, S = map(int, input().split())\n    difficulties = []  # List to store the difficulty of each problem\n\n    # Process each problem\n    for i in range(1, P + 1):\n        # Read scores and number of contestants for the current problem\n        scores = list(map(int, input().split()))\n        contestants = list(map(int, input().split()))\n        \n        # Pair scores with contestants and sort by score\n        paired = sorted(zip(scores, contestants))\n        \n        # Count the number of valid indices where NS_k > NS_{k + 1}\n        count = 0\n        for k in range(S - 1):\n            if paired[k][1] > paired[k + 1][1]:\n                count += 1\n        \n        # Store the difficulty as a tuple (count, problem index)\n        difficulties.append((count, i))\n\n    # Sort the difficulties by (count, index)\n    difficulties.sort()\n\n    # Print the indices of the problems in sorted order\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Call the function to execute the solution\nsort_problems_by_difficulty()\n",
    "program_name": "sort_problems_by_difficulty",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   Chef is organizing a contest with multiple problems, each having several subtasks. Each subtask has a score and a number of contestants who solved it. The difficulty of each problem is determined by counting how many times the number of contestants who solved a subtask is greater than the next subtask when the subtasks are sorted by score. The goal is to sort the problems based on their difficulty and print the indices of the problems in increasing order of difficulty.\n\n2. **Conceptualize a solution first in plain English:**\n   - Read the number of problems (P) and the number of subtasks (S).\n   - For each problem, read the scores and the number of contestants who solved each subtask.\n   - Pair the scores and the number of contestants, then sort the subtasks based on scores.\n   - Count the number of valid indices where the number of contestants solving a subtask is greater than the next subtask.\n   - Store the difficulty of each problem as a tuple (count, index).\n   - Sort the problems based on the difficulty tuples.\n   - Print the indices of the problems in the sorted order.\n\n3. **Write a pseudocode solution:**\n   ```\n   Read P and S\n   Initialize an empty list difficulties\n   For each problem from 1 to P:\n       Read scores and number of contestants\n       Pair scores with contestants\n       Sort the pairs by score\n       Initialize count to 0\n       For k from 0 to S-2:\n           If contestants[k] > contestants[k+1]:\n               Increment count\n       Append (count, problem index) to difficulties\n   Sort difficulties by (count, index)\n   For each difficulty in difficulties:\n       Print the index of the problem\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef sort_problems_by_difficulty():\n    # Read the number of problems (P) and subtasks (S)\n    P, S = map(int, input().split())\n    difficulties = []  # List to store the difficulty of each problem\n\n    # Process each problem\n    for i in range(1, P + 1):\n        # Read scores and number of contestants for the current problem\n        scores = list(map(int, input().split()))\n        contestants = list(map(int, input().split()))\n        \n        # Pair scores with contestants and sort by score\n        paired = sorted(zip(scores, contestants))\n        \n        # Count the number of valid indices where NS_k > NS_{k + 1}\n        count = 0\n        for k in range(S - 1):\n            if paired[k][1] > paired[k + 1][1]:\n                count += 1\n        \n        # Store the difficulty as a tuple (count, problem index)\n        difficulties.append((count, i))\n\n    # Sort the difficulties by (count, index)\n    difficulties.sort()\n\n    # Print the indices of the problems in sorted order\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Call the function to execute the solution\nsort_problems_by_difficulty()\n```",
    "no_parent": false,
    "dependency_used": false
}