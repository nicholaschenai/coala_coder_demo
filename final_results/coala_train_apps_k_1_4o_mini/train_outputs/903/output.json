{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '1 1', '4 4'] Output: 1.60\n\nTests failed:\nNone",
    "code": "\ndef find_mirror_position(T, test_cases):\n    # Iterate through each test case\n    for x1, y1, x2, y2 in test_cases:\n        # Calculate the x-coordinate of the mirror using the formula derived from similar triangles\n        mirror_x = (x1 * y2 + x2 * y1) / (y1 + y2)\n        # Print the result with the required precision\n        print(f\"{mirror_x:.2f}\")\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    test_cases.append((x1, y1, x2, y2))\n\n# Call the function to find and print the mirror positions\nfind_mirror_position(T, test_cases)\n",
    "full_code": "\ndef find_mirror_position(T, test_cases):\n    # Iterate through each test case\n    for x1, y1, x2, y2 in test_cases:\n        # Calculate the x-coordinate of the mirror using the formula derived from similar triangles\n        mirror_x = (x1 * y2 + x2 * y1) / (y1 + y2)\n        # Print the result with the required precision\n        print(f\"{mirror_x:.2f}\")\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    test_cases.append((x1, y1, x2, y2))\n\n# Call the function to find and print the mirror positions\nfind_mirror_position(T, test_cases)\n",
    "reward": true,
    "program_code": "\ndef find_mirror_position(T, test_cases):\n    # Iterate through each test case\n    for x1, y1, x2, y2 in test_cases:\n        # Calculate the x-coordinate of the mirror using the formula derived from similar triangles\n        mirror_x = (x1 * y2 + x2 * y1) / (y1 + y2)\n        # Print the result with the required precision\n        print(f\"{mirror_x:.2f}\")\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    test_cases.append((x1, y1, x2, y2))\n\n# Call the function to find and print the mirror positions\nfind_mirror_position(T, test_cases)\n",
    "program_name": "find_mirror_position",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to determine the position on the x-axis (the front wall of a classroom) where a mirror should be placed so that Kabir, who is sitting at a certain coordinate (x1, y1), can see Tara, who is sitting at another coordinate (x2, y2). The mirror will reflect Tara's position to Kabir's line of sight.\n\n2. **Conceptualize a solution first in plain English**: \n   To find the position of the mirror, we need to calculate the x-coordinate where the reflection of Tara's position would meet the line of sight from Kabir. The mirror's position can be determined using the concept of similar triangles. The y-coordinate of the mirror will be 0 (since it lies on the x-axis), and we can use the properties of similar triangles to derive the x-coordinate of the mirror.\n\n3. **Write a pseudocode solution**:\n   ```\n   function find_mirror_position(T, test_cases):\n       for each test_case in test_cases:\n           read x1, y1\n           read x2, y2\n           # Calculate the x-coordinate of the mirror\n           mirror_x = (x1 * y2 + x2 * y1) / (y1 + y2)\n           print mirror_x\n       \n   read T\n   test_cases = []\n   for i from 1 to T:\n       read x1, y1\n       read x2, y2\n       add (x1, y1, x2, y2) to test_cases\n       \n   find_mirror_position(T, test_cases)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_mirror_position(T, test_cases):\n    # Iterate through each test case\n    for x1, y1, x2, y2 in test_cases:\n        # Calculate the x-coordinate of the mirror using the formula derived from similar triangles\n        mirror_x = (x1 * y2 + x2 * y1) / (y1 + y2)\n        # Print the result with the required precision\n        print(f\"{mirror_x:.2f}\")\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\n\n# Read each test case\nfor _ in range(T):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    test_cases.append((x1, y1, x2, y2))\n\n# Call the function to find and print the mirror positions\nfind_mirror_position(T, test_cases)\n```",
    "no_parent": false,
    "dependency_used": false
}