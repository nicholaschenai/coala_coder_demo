{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '1 1'] Output: 1\n\nTests failed:\nNone",
    "code": "\ndef calculate_fibonacci_sum(queries):\n    # Find the maximum N from all queries to limit Fibonacci generation\n    max_n = max(N for N, K in queries)\n    \n    # Initialize the Fibonacci list with the first two Fibonacci numbers\n    fib = [0, 1]\n    \n    # Generate Fibonacci numbers up to the maximum N requested\n    while len(fib) <= max_n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n    \n    # Precompute the sums of Fibonacci numbers\n    fib_sums = [0] * (len(fib))\n    for i in range(1, len(fib)):\n        fib_sums[i] = fib_sums[i - 1] + fib[i]\n    \n    # Process each query and output the results\n    results = []\n    for N, K in queries:\n        if K > N:\n            results.append(0)\n        else:\n            results.append(fib_sums[K])\n    \n    # Print all results\n    for res in results:\n        print(res)\n\n# Read number of queries\nQ = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(Q)]\ncalculate_fibonacci_sum(queries)\n",
    "full_code": "\ndef calculate_fibonacci_sum(queries):\n    # Find the maximum N from all queries to limit Fibonacci generation\n    max_n = max(N for N, K in queries)\n    \n    # Initialize the Fibonacci list with the first two Fibonacci numbers\n    fib = [0, 1]\n    \n    # Generate Fibonacci numbers up to the maximum N requested\n    while len(fib) <= max_n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n    \n    # Precompute the sums of Fibonacci numbers\n    fib_sums = [0] * (len(fib))\n    for i in range(1, len(fib)):\n        fib_sums[i] = fib_sums[i - 1] + fib[i]\n    \n    # Process each query and output the results\n    results = []\n    for N, K in queries:\n        if K > N:\n            results.append(0)\n        else:\n            results.append(fib_sums[K])\n    \n    # Print all results\n    for res in results:\n        print(res)\n\n# Read number of queries\nQ = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(Q)]\ncalculate_fibonacci_sum(queries)\n",
    "reward": true,
    "program_code": "\ndef calculate_fibonacci_sum(queries):\n    # Find the maximum N from all queries to limit Fibonacci generation\n    max_n = max(N for N, K in queries)\n    \n    # Initialize the Fibonacci list with the first two Fibonacci numbers\n    fib = [0, 1]\n    \n    # Generate Fibonacci numbers up to the maximum N requested\n    while len(fib) <= max_n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n    \n    # Precompute the sums of Fibonacci numbers\n    fib_sums = [0] * (len(fib))\n    for i in range(1, len(fib)):\n        fib_sums[i] = fib_sums[i - 1] + fib[i]\n    \n    # Process each query and output the results\n    results = []\n    for N, K in queries:\n        if K > N:\n            results.append(0)\n        else:\n            results.append(fib_sums[K])\n    \n    # Print all results\n    for res in results:\n        print(res)\n\n# Read number of queries\nQ = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(Q)]\ncalculate_fibonacci_sum(queries)\n",
    "program_name": "calculate_fibonacci_sum",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to calculate the sum of Fibonacci numbers for multiple queries. Each query provides two integers, N and K, and we need to compute the sum of the first K Fibonacci numbers up to the N-th Fibonacci number.\n\n2. **Conceptualize a solution first in plain English:**\n   The Fibonacci sequence is defined such that:\n   - F(0) = 0\n   - F(1) = 1\n   - F(n) = F(n-1) + F(n-2) for n >= 2\n   To solve the problem, we need to:\n   - Generate Fibonacci numbers up to the maximum N requested across all queries.\n   - For each query, compute the sum of the first K Fibonacci numbers, ensuring that K does not exceed the number of Fibonacci numbers generated.\n\n3. **Write a pseudocode solution:**\n   ```\n   function calculate_fibonacci_sum(queries):\n       max_n = find the maximum N from all queries\n       fib = [0, 1]  # Initialize Fibonacci list\n       \n       # Generate Fibonacci numbers up to max_n\n       while length of fib <= max_n:\n           next_fib = fib[-1] + fib[-2]\n           append next_fib to fib\n       \n       # Precompute the sums of Fibonacci numbers\n       fib_sums = [0] * (len(fib))\n       for i from 1 to len(fib):\n           fib_sums[i] = fib_sums[i - 1] + fib[i]\n       \n       # Process each query\n       for (N, K) in queries:\n           if K > N:\n               output 0\n           else:\n               output fib_sums[K]\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef calculate_fibonacci_sum(queries):\n    # Find the maximum N from all queries to limit Fibonacci generation\n    max_n = max(N for N, K in queries)\n    \n    # Initialize the Fibonacci list with the first two Fibonacci numbers\n    fib = [0, 1]\n    \n    # Generate Fibonacci numbers up to the maximum N requested\n    while len(fib) <= max_n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n    \n    # Precompute the sums of Fibonacci numbers\n    fib_sums = [0] * (len(fib))\n    for i in range(1, len(fib)):\n        fib_sums[i] = fib_sums[i - 1] + fib[i]\n    \n    # Process each query and output the results\n    results = []\n    for N, K in queries:\n        if K > N:\n            results.append(0)\n        else:\n            results.append(fib_sums[K])\n    \n    # Print all results\n    for res in results:\n        print(res)\n\n# Read number of queries\nQ = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(Q)]\ncalculate_fibonacci_sum(queries)\n```",
    "no_parent": false,
    "dependency_used": false
}